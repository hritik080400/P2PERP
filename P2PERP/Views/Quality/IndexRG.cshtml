@{
    ViewBag.Title = "IndexRG";
    Layout = "~/Views/Shared/_QualityLayout.cshtml";
}

<html>
<head>
</head>
    <body class="bg-light">
        <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>

        <div class="container mt-5">
            <div class="card shadow-lg rounded-3 border-0">

                <!-- 🔹 Card Header -->
                <div class="card-header text-primary text-center">
                    <h3 class="mb-0 text-primary fw-bolder">Check Quality</h3>
                </div>

                <!-- 🔹 Card Body -->
                <div class="card-body">

                    <!-- ✅ Task Section -->
                    <div id="taskSection" class="mt-4" style="display:none;">
                        <!-- Nav Pills -->
                        <ul class="nav nav-pills mb-3" id="taskTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active fw-medium"
                                        id="new-task-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#newTaskTab"
                                        type="button"
                                        role="tab"
                                        aria-controls="newTaskTab"
                                        aria-selected="true">
                                    New Task
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link fw-medium"
                                        id="completed-task-tab"
                                        data-bs-toggle="pill"
                                        data-bs-target="#completedTaskTab"
                                        type="button"
                                        role="tab"
                                        aria-controls="completedTaskTab"
                                        aria-selected="false">
                                    Completed Task
                                </button>
                            </li>
                        </ul>

                        <!-- Tab Content -->
                        <div class="tab-content mt-3" id="taskTabsContent">
                            <div class="tab-pane fade show active"
                                 id="newTaskTab"
                                 role="tabpanel"
                                 aria-labelledby="new-task-tab"
                                 tabindex="0">
                                <div id="newTaskContent" class="p-3">Loading...</div>
                            </div>
                            <div class="tab-pane fade"
                                 id="completedTaskTab"
                                 role="tabpanel"
                                 aria-labelledby="completed-task-tab"
                                 tabindex="0">
                                <div id="completedTaskContent" class="p-3">Loading...</div>
                            </div>
                        </div>
                    </div>

                    <!-- ✅ Date Range + Export (inside card body) -->
                    <div class="d-flex justify-content-between align-items-start mb-4 flex-wrap">

                        <!-- Date Range Picker -->
                        <div class="mt-2" id="dtp">
                            <div class="input-group" style="height: 40px; max-width: 280px;">
                                <span class="input-group-text bg-primary text-white" style="height: 100%;">
                                    <i class="bi bi-calendar-date"></i>
                                </span>
                                <input type="text" id="grnlistdatepicker" class="form-control"
                                       placeholder="Select date range" readonly style="height: 100%;" />
                            </div>
                        </div>

                        <!-- Export Buttons -->
                        <div id="exportContainer" class="d-flex mt-2" style="height: 40px; align-items: center;"></div>
                    </div>

                    <!-- ✅ GRN Grid -->
                    <div id="grnGridSection">
                        <div class="table-responsive">
                            <table id="grnTable" class="table table-striped table-hover table-bordered align-middle text-center">
                                <thead class="table-dark">
                                    <tr>
                                        <th><input type="checkbox" id="selectAll" /></th>
                                        <th>Sr.No</th>
                                        <th>GRN Code</th>
                                        <th>Added Date</th>
                                        <th>PO Code</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>

                </div> <!-- card-body -->
            </div> <!-- card -->
        </div> <!-- container -->








        <script>
            // ✅ Toast function
            function showToast(message, type = 'error') {
                // Map to Bootstrap contextual colors
                let icon = '';
                let progressColor = '';

                switch (type) {
                    case 'success':
                        icon = '<i class="bi bi-check-circle-fill me-2"></i>';
                        progressColor = 'bg-light';
                        break;
                    case 'warning':
                        icon = '<i class="bi bi-exclamation-triangle-fill me-2"></i>';
                        progressColor = 'bg-dark';
                        break;
                    case 'info':
                        icon = '<i class="bi bi-info-circle-fill me-2"></i>';
                        progressColor = 'bg-light';
                        break;
                    default: // error
                        icon = '<i class="bi bi-x-circle-fill me-2"></i>';
                        progressColor = 'bg-light';
                }

                const toastId = `toast-${Date.now()}`;

                // ✅ Toast HTML with white text for all
                const toastHTML = `
<div id="${toastId}" class="toast align-items-center bg-${type} border-0 mb-2 shadow-lg"
                         role="alert" aria-live="assertive" aria-atomic="true"
                         data-bs-delay="3000" data-bs-animation="true">
                        <div class="d-flex">
                            <div class="toast-body d-flex align-items-center text-white">
                                ${icon} ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                    data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="progress" style="height: 3px; margin:0; background: rgba(255,255,255,0.3);">
                    <div class="progress-bar" role="progressbar"></div>
</div>

</div>`;

                const $toast = $(toastHTML);
                $('#toastContainer').prepend($toast); // newestOnTop

                // ✅ Initialize bootstrap toast
                const toast = new bootstrap.Toast($toast[0], { delay: 3000 });
                toast.show();

                // ✅ Animate progress bar
                $toast.find('.progress-bar')
                    .css({
                        width: "100%",
                        float: "right",
                        backgroundColor: "black"
                    })
                    .animate(
                        { width: "0%" },
                        { duration: 3000, easing: "linear" }
                    );



                // ✅ Auto-remove
                $toast.on('hidden.bs.toast', function () {
                    $(this).remove();
                });
            }




            // ✅ Initialize DataTable
            function initGrnTable() {
                if ($.fn.DataTable.isDataTable('#grnTable')) {
                    $('#grnTable').DataTable().clear().destroy(); // destroy old instance
                }
                var table = $('#grnTable').DataTable({
                    ajax: {
                        url: '/Quality/AllgriddataRG',
                        type: 'GET',
                        dataSrc: ''
                    },
                    columns: [
                        {
                            data: null,
                            orderable: false,
                            className: 'select-checkbox text-center',
                            render: function (data, type, row) {
                                return `<input type="checkbox" class="row-select" value="${row.GRNCode}">`;
                            }
                        },
                        {
                            data: null,
                            render: function (data, type, row, meta) {
                                return meta.row + 1;
                            }
                        },
                        { data: 'GRNCode' },
                        { data: 'AddedDate' },
                        { data: 'POcode' },
                        {
                            data: 'Status',
                            render: function (data) {
                                let badgeClass = '';
                                let statusText = (data || '').toLowerCase().trim();

                                switch (statusText) {
                                    case 'partiallycompleted': badgeClass = 'bg-warning text-dark'; break;
                                    case 'completed': badgeClass = 'bg-success'; break;
                                    case 'inprocess': badgeClass = 'bg-danger'; break;
                                    default: badgeClass = 'bg-secondary';
                                }
                                return `<span class="badge ${badgeClass}">${data}</span>`;
                            }
                        },
                        {
                            data: 'GRNCode',
                            render: function (data, type, row) {
                                return `<button class="btn btn-sm btn-primary"
                    onclick="openTask('${row.GRNCode}', '${row.Status}')"
                    data-bs-toggle="tooltip"
                    data-bs-placement="top"
                    title="Open Task">
                <i class="bi bi-box-arrow-up-right"></i>
            </button>`;
                            }
                        }
                    ],
                    columnDefs: [{ targets: "_all", className: "text-center" }],
                    layout: {
                        topStart: {
                            buttons: getExportButtons()
                        }
                    },
                    responsive: true,
                    paging: true,
                    searching: true,
                    ordering: true
                });

                // Stop spinner after export
                table.on('buttons-processing.dt', function (e, btn, processing) {
                    if (!processing) {
                        table.processing(false);
                    }
                });

                // Master checkbox select all
                $('#selectAll').on('click', function () {
                    $('.row-select').prop('checked', this.checked);
                });

                return table;
            }

            // ✅ Export button definitions
            function getExportButtons() {
                return [
                    {
                        extend: 'print',
                        text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                        titleAttr: 'Print Selected',
                        action: function (e, dt, button, config) {
                            if ($('#grnTable .row-select:checked').length === 0) {
                                showToast("Please select at least one row to print!", "warning");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            dt.processing(false); // ✅ force remove buffering spinner
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: ':visible:not(:first-child):not(:last-child)',
                            format: {
                                body: (function () {
                                    let counter = 0;
                                    return function (data, row, column, node) {
                                        data = typeof data === 'string'
                                            ? data.replace(/<[^>]*>/g, '').trim()
                                            : data;
                                        if (column === 1) {
                                            counter++;
                                            return counter;
                                        }
                                        return data;
                                    };
                                })()
                            },

                        },
                        title: 'GRN List',
                        customize: function (win) {
                            // 🔹 Change title style
                            $(win.document.body).find('h1')
                                .css('text-align', 'center')
                                .css('font-size', '16pt')
                                .css('font-weight', 'bold')
                                .css('color', 'black');

                            // 🔹 Add generated date below title
                            $(win.document.body).prepend(
                                `<div style="text-align:center; font-size:12pt; font-style:italic; margin-bottom:10px;">
                         Generated on: ${new Date().toLocaleString()}
                     </div>`
                            );

                            // 🔹 Style table headers
                            $(win.document.body).find('table thead th')
                                .css('background-color', 'black')
                                .css('color', 'white')
                                .css('font-weight', 'bold')
                                .css('text-align', 'center');
                        }
                    },
                    //code for Pdf

                    {
                        extend: 'pdfHtml5',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                        titleAttr: 'Export to PDF',
                        action: function (e, dt, button, config) {
                            if ($('#grnTable .row-select:checked').length === 0) {
                                showToast("Please select at least one row to export!", "warning");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                            dt.processing(false); // ✅ force remove buffering spinner
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: ':visible:not(:first-child):not(:last-child)',
                            format: {
                                body: (function () {
                                    let counter = 0;
                                    return function (data, row, column, node) {
                                        data = typeof data === 'string'
                                            ? data.replace(/<[^>]*>/g, '').trim()
                                            : data;
                                        if (column === 1) {
                                            counter++;
                                            return counter;
                                        }
                                        return data;
                                    };
                                })()
                            }
                        },
                        title: 'GRN List',
                        filename: function () {
                            return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                        },
                        customize: function (doc) {
                            doc.styles.title = {
                                fontSize: 16,
                                bold: true,
                                alignment: 'center',
                                color: 'black',

                            };

                            doc.content.splice(1, 0, {
                                text: 'Generated on: ' + new Date().toLocaleString(),
                                fontSize: 12,
                                italics: true,
                                alignment: 'center',
                                margin: [0, 0, 0, 10]
                            });
                            var tableNode = doc.content[doc.content.length - 1].table;
                            var headerCells = tableNode.body[0];
                            headerCells.forEach(function (cell) {
                                cell.fillColor = 'black';
                                cell.color = 'white';
                                cell.bold = true;
                                cell.alignment = 'center';
                            });
                            tableNode.layout = {
                                paddingLeft: () => 30, paddingLeft: () => 6,

                            };
                            var colCount = tableNode.body[0].length;
                            tableNode.widths = new Array(colCount).fill('*'); // distribute evenly
                        }
                    },
                    //code for excel

                    {
                        extend: 'excelHtml5',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                        titleAttr: 'Export to Excel',
                        action: function (e, dt, button, config) {
                            if ($('#grnTable  .row-select:checked').length === 0) {
                                showToast("Please select at least one row to export!", "warning");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                            dt.processing(false); // ✅ force remove buffering spinner
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked'); // ✅ only checked rows
                            },
                            columns: ':visible',
                            format: {
                                body: (function () {
                                    let counter = 0;
                                    return function (data, row, column, node) {
                                        data = typeof data === 'string'
                                            ? data.replace(/<[^>]*>/g, '').trim()
                                            : data;
                                        if (column === 1) {
                                            if (!window.__srnoCounter) window.__srnoCounter = 0;
                                            return ++window.__srnoCounter;
                                        }
                                        return data;
                                    };
                                })()
                            }
                        },
                        title: 'GRN List',
                        filename: function () {
                            return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                        },
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            $('row:first c', sheet).attr('s', '2'); // ✅ bold header
                            window.__srnoCounter = 0; // reset counter after export
                        }
                    },
                    //code for csv

                    {
                        extend: 'csvHtml5',
                        text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                        titleAttr: 'Export to CSV',
                        action: function (e, dt, button, config) {
                            if ($('#grnTable  .row-select:checked').length === 0) {
                                showToast("Please select at least one row to export!", "warning");
                                return;
                            }
                            window.__srnoCounter = 0; // reset counter after export

                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                            dt.processing(false); // ✅ force remove buffering spinner
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked'); // ✅ only checked rows
                            },
                            columns: ':visible',
                            format: {
                                body: (function () {
                                    let counter = 0;
                                    return function (data, row, column, node) {
                                        data = typeof data === 'string'
                                            ? data.replace(/<[^>]*>/g, '').trim()
                                            : data;
                                        if (column === 1) {
                                            if (!window.__srnoCounter) window.__srnoCounter = 0;
                                            return ++window.__srnoCounter;
                                        }
                                        if (column === 3) {
                                            // Convert to proper DD-MM-YYYY
                                            if (moment(data, 'DD-MM-YYYY', true).isValid()) {
                                                return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                            }
                                            // fallback if data is ISO or DB format
                                            if (moment(data).isValid()) {
                                                return moment(data).format('DD-MM-YYYY');
                                            }
                                            return data; // leave unchanged if not a date
                                        }
                                        return data;
                                    };
                                })()
                            }
                        },
                        title: 'GRN List',
                        filename: function () {
                            return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                        }
                    }
                ];
            }

            // ✅ Require selection before export
            function requireSelection(e, dt, button, config) {
                if ($('#grnTable .row-select:checked').length === 0) {
                    showToast("Please select at least one row!", "warning");
                    return;
                }
                $.fn.dataTable.ext.buttons[button[0].className.split(' ')[0]].action.call(this, e, dt, button, config);
                dt.processing(false);
            }

            // ✅ Export options with custom row filtering
            function getExportOptions(columns) {
                return {
                    rows: (idx, data, node) => $(node).find('.row-select').prop('checked'),
                    columns: columns,
                    format: {
                        body: (() => {
                            let counter = 0;
                            return (data, row, column, node) => {
                                data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                if (column === 1) {
                                    counter++;
                                    return counter;
                                }
                                return data;
                            };
                        })()
                    }
                };
            }

            //  Customize Print
            function customizePrint(win) {
                $(win.document.body).find('h1')
                    .css({ 'text-align': 'center', 'font-size': '16pt', 'font-weight': 'bold', 'color': 'black' });

                $(win.document.body).prepend(
                    `<div style="text-align:center; font-size:12pt; font-style:italic; margin-bottom:10px;">
                                        Generated on: ${new Date().toLocaleString()}
                                     </div>`
                );

                $(win.document.body).find('table thead th')
                    .css({ 'background-color': 'black', 'color': 'white', 'font-weight': 'bold', 'text-align': 'center' });
            }

            //  Customize PDF
            function customizePdf(doc) {
                doc.styles.title = { fontSize: 16, bold: true, alignment: 'center', color: 'black' };
                doc.content.splice(1, 0, {
                    text: 'Generated on: ' + new Date().toLocaleString(),
                    fontSize: 12, italics: true, alignment: 'center', margin: [0, 0, 0, 10]
                });
                let tableNode = doc.content[doc.content.length - 1].table;
                tableNode.body[0].forEach(cell => {
                    cell.fillColor = 'black';
                    cell.color = 'white';
                    cell.bold = true;
                    cell.alignment = 'center';
                });
            }

            // ✅ Customize Excel
            function customizeExcel(xlsx) {
                var sheet = xlsx.xl.worksheets['sheet1.xml'];
                $('row:first c', sheet).attr('s', '2');
            }

            // ✅ Date Range Picker
            function initDatePicker(table) {
                $('#grnlistdatepicker').daterangepicker({
                    autoUpdateInput: false,
                    opens: "center",
                    drops: "down",
                    locale: { cancelLabel: 'Clear' },
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    }
                }, function (start, end) {
                    $('#grnlistdatepicker').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));

                    $.fn.dataTable.ext.search.push(function (settings, data) {
                        var addedDate = moment(data[3], 'DD-MM-YYYY');
                        return addedDate.isBetween(start, end, undefined, '[]');
                    });

                    table.draw();
                    $.fn.dataTable.ext.search.pop();
                });

                $('#grnlistdatepicker').on('cancel.daterangepicker', function () {
                    $(this).val('');
                    table.draw();
                });
            }

            //  Task Section
            function openTask(grnCode, status) {
                $("#grnGridSection").hide();
                $("#taskSection").show();
                $('#dtp').hide();

                if (status.toLowerCase().trim() === "completed") {
                    $('#completed-task-tab').tab('show'); // Activate Completed tab
                } else {
                    $('#new-task-tab').tab('show'); // Default to New Task tab
                }

                $("#newTaskContent").load(`/Quality/NewTaskListRG?id=${grnCode}`);
                $("#completedTaskContent").load(`/Quality/CompletedTaskListRG?id=${grnCode}`);
            }

            // ✅ Initialize everything
            $(document).ready(function () {
                const table = initGrnTable();
                $('#grnTable').on('draw.dt', function () {
                    $('[data-bs-toggle="tooltip"]').tooltip();
                });
                initDatePicker(table);
            });
        </script>

    </body>
</html>
