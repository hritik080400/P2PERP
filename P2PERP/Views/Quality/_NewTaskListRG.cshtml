@{
    ViewBag.Title = "GRN Task List";
}

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
        .modal-backdrop {
            display: none;
        }

        body.modal-open .main-content {
            position: relative;
        }

            body.modal-open .main-content::after {
                content: '';
                position: fixed;
                inset: 0;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 1040;
                pointer-events: none;
            }

        .modal {
            z-index: 1055 !important;
        }
    </style>

</head>

<body class="bg-light">

    <div class="main-content">

        <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>
        <div class="container mt-5">


            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-bold text-primary"></h2>
            </div>

            <!-- GRN Info Card -->
            <div class="card shadow-sm rounded-3 mb-4 border-0">
                <div class="card-body">
                    <div class="row g-3 align-items-center">
                        <div class="col-md-2">
                            <label for="grnno" class="col-form-label fw-semibold">GRN No:</label>
                        </div>
                        <div class="col-md-4">
                            <input type="text" id="grnno" value="@ViewBag.GRN"
                                   name="GRNCode" class="form-control" readonly />
                        </div>

                        <!-- Back Button on Right Side -->
                        <div class="col-md-6 text-end">
                            <button type="button"
                                    class="btn btn-primary text-white"
                                    onclick="location.href='/Quality/IndexRG'">
                                Back
                            </button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- ✅ Table with DataTables -->
            <div class="card shadow-lg rounded-3 border-0">
                <div class="card-body">
                    <h5 class="card-title fw-semibold mb-3"> New Task</h5>
                    <div class="table-responsive">
                        <table id="newTaskTable" class="table table-striped table-hover table-bordered align-middle text-center mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th><input type="checkbox" id="selectAllNewTask" /></th>
                                    <th>Sr.No</th>
                                    <th>Item Code</th>
                                    <th>Item Name</th>
                                    <th>Item Type</th>
                                    <th>Inspection Type</th>
                                    <th>Plan Name</th>
                                    <th>Assigned Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Modal for Inspection Form -->

    <div class="modal fade" id="inspecModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content shadow-lg rounded-4">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Inspection Form</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="inspecModalBody">
                    <div class="text-center text-muted">Loading...</div>
                </div>
            </div>
        </div>
    </div>

   










    <script>
        /* this function returns toastmessage */

        // ✅ Toast function
        function showToast(message, type = 'error') {
            // Map to Bootstrap contextual colors
            let icon = '';
            let progressColor = '';

            switch (type) {
                case 'success':
                    icon = '<i class="bi bi-check-circle-fill me-2"></i>';
                    progressColor = 'bg-light';
                    break;
                case 'warning':
                    icon = '<i class="bi bi-exclamation-triangle-fill me-2"></i>';
                    progressColor = 'bg-dark';
                    break;
                case 'info':
                    icon = '<i class="bi bi-info-circle-fill me-2"></i>';
                    progressColor = 'bg-light';
                    break;
                default: // error
                    icon = '<i class="bi bi-x-circle-fill me-2"></i>';
                    progressColor = 'bg-light';
            }

            const toastId = `toast-${Date.now()}`;

            // ✅ Toast HTML with white text for all
            const toastHTML = `
<div id="${toastId}" class="toast align-items-center bg-${type} border-0 mb-2 shadow-lg"
             role="alert" aria-live="assertive" aria-atomic="true"
             data-bs-delay="3000" data-bs-animation="true">
            <div class="d-flex">
                <div class="toast-body d-flex align-items-center text-white">
                    ${icon} ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto"
                        data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="progress" style="height: 3px; margin:0; background: rgba(255,255,255,0.3);">
        <div class="progress-bar" role="progressbar"></div>
</div>

</div>`;

            const $toast = $(toastHTML);
            $('#toastContainer').prepend($toast); // newestOnTop

            // ✅ Initialize bootstrap toast
            const toast = new bootstrap.Toast($toast[0], { delay: 3000 });
            toast.show();

            // ✅ Animate progress bar
            $toast.find('.progress-bar')
                .css({
                    width: "100%",
                    float: "right",
                    backgroundColor: "black"
                })
                .animate(
                    { width: "0%" },
                    { duration: 3000, easing: "linear" }
                );



            // ✅ Auto-remove
            $toast.on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }

        //this is used for showing data in grid
        $(document).ready(function () {
            var id = $('#grnno').val();
            console.log("GRN ID:", id);

            if (id && id.trim() !== "") {
                var table = $('#newTaskTable').DataTable({
                    ajax: {
                        url: '/Quality/ItemByGRNRG',
                        type: 'GET',
                        data: { id: id },
                        dataSrc: '' // controller returns List<>
                    },
                    columns: [
                        {
                            data: null,
                            orderable: false,
                            className: 'select-checkbox text-center',
                            render: function (data, type, row, meta) {
                                return `<input type="checkbox" class="row-select" value="${row.ItemCode}">`;
                            }
                        },
                        {
                            data: null,
                            render: function (data, type, row, meta) {
                                return meta.row + 1; // ✅ Sr.No
                            }
                        },
                        { data: 'ItemCode' },
                        { data: 'ItemName' },
                        { data: 'ItemType' },
                        { data: 'InspectionType' },
                        { data: 'PlanName' },
                        { data: 'AddedDate' },
                        {
                            data: 'ItemCode',
                            render: function (data, type, row) {
                                return `<button class="btn btn-sm btn-primary" onclick="openInspecForm('${data}')">Open</button>`;
                            }
                        }
                    ],
                    columnDefs: [
                        { targets: "_all", className: "text-center" }
                    ],
                    layout: {
                        topStart: {
                            buttons: [

                                //code for Print
                                {
                                    extend: 'print',
                                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                                    titleAttr: 'Print Selected',
                                    action: function (e, dt, button, config) {
                                        if ($('#newTaskTable  .row-select:checked').length === 0) {
                                            showToast("Please select at least one row to print!", "warning");
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                        dt.processing(false); // ✅ force remove buffering spinner
                                    },
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $('input.row-select', node).is(':checked');
                                        },
                                        columns: ':visible:not(:first-child):not(:last-child)',
                                        format: {
                                            body: (function () {
                                                let counter = 0;
                                                return function (data, row, column, node) {
                                                    data = typeof data === 'string'
                                                        ? data.replace(/<[^>]*>/g, '').trim()
                                                        : data;
                                                    if (column === 1) {
                                                        counter++;
                                                        return counter;
                                                    }
                                                    return data;
                                                };
                                            })()
                                        }
                                    },
                                    title: 'GRN List',
                                    customize: function (win) {
                                        // 🔹 Change title style
                                        $(win.document.body).find('h1')
                                            .css('text-align', 'center')
                                            .css('font-size', '16pt')
                                            .css('font-weight', 'bold')
                                            .css('color', 'black');

                                        // 🔹 Add generated date below title
                                        $(win.document.body).prepend(
                                            `<div style="text-align:center; font-size:12pt; font-style:italic; margin-bottom:10px;">
                                                                                                Generated on: ${new Date().toLocaleString()}
                                                                                             </div>`
                                        );

                                        // 🔹 Style table headers
                                        $(win.document.body).find('table thead th')
                                            .css('background-color', 'black')
                                            .css('color', 'white')
                                            .css('font-weight', 'bold')
                                            .css('text-align', 'center');
                                    }
                                },
                                //code for Pdf

                                {
                                    extend: 'pdfHtml5',
                                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                    titleAttr: 'Export to PDF',
                                    action: function (e, dt, button, config) {
                                        if ($('#newTaskTable .row-select:checked').length === 0) {
                                            showToast("Please select at least one row to export!", "warning");
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                        dt.processing(false); // ✅ force remove buffering spinner
                                    },
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $(node).find('.row-select').prop('checked');
                                        },
                                        columns: ':visible:not(:first-child):not(:last-child)',
                                        format: {
                                            body: (function () {
                                                let counter = 0;
                                                return function (data, row, column, node) {
                                                    data = typeof data === 'string'
                                                        ? data.replace(/<[^>]*>/g, '').trim()
                                                        : data;
                                                    if (column === 1) {
                                                        counter++;
                                                        return counter;
                                                    }
                                                    return data;
                                                };
                                            })()
                                        }
                                    },
                                    title: 'GRN List',
                                    filename: function () {
                                        return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                                    },
                                    customize: function (doc) {
                                        doc.styles.title = {
                                            fontSize: 16,
                                            bold: true,
                                            alignment: 'center',
                                            color: 'black',

                                        };

                                        doc.content.splice(1, 0, {
                                            text: 'Generated on: ' + new Date().toLocaleString(),
                                            fontSize: 12,
                                            italics: true,
                                            alignment: 'center',
                                            margin: [0, 0, 0, 10]
                                        });
                                        var tableNode = doc.content[doc.content.length - 1].table;
                                        var headerCells = tableNode.body[0];
                                        headerCells.forEach(function (cell) {
                                            cell.fillColor = 'black';
                                            cell.color = 'white';
                                            cell.bold = true;
                                            cell.alignment = 'center';
                                        });
                                        tableNode.layout = {
                                            paddingLeft: () => 30, paddingLeft: () => 6,

                                        };
                                        var colCount = tableNode.body[0].length;
                                        tableNode.widths = new Array(colCount).fill('*'); // distribute evenly
                                    }
                                },
                                //code for excel

                                {
                                    extend: 'excelHtml5',
                                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                    titleAttr: 'Export to Excel',
                                    action: function (e, dt, button, config) {
                                        if ($('#newTaskTable  .row-select:checked').length === 0) {
                                            showToast("Please select at least one row to export!", "warning");
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                        dt.processing(false); // ✅ force remove buffering spinner
                                    },
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $('input.row-select', node).is(':checked');
                                        },
                                        columns: ':visible',
                                        format: {
                                            body: (function () {
                                                let counter = 0;
                                                return function (data, row, column, node) {
                                                    data = typeof data === 'string'
                                                        ? data.replace(/<[^>]*>/g, '').trim()
                                                        : data;
                                                    if (column === 1) {
                                                        counter++;
                                                        return counter;
                                                    }
                                                    return data;
                                                };
                                            })()
                                        }
                                    },
                                    title: 'GRN List',
                                    filename: function () {
                                        return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                                    },
                                    customize: function (xlsx) {
                                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                        $('row:first c', sheet).attr('s', '2'); // ✅ bold header
                                    }
                                },
                                //code for csv

                                {
                                    extend: 'csvHtml5',
                                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                                    titleAttr: 'Export to CSV',
                                    action: function (e, dt, button, config) {
                                        if ($('#newTaskTable  .row-select:checked').length === 0) {
                                            showToast("Please select at least one row to export!", "warning");
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                        dt.processing(false); // ✅ force remove buffering spinner
                                    },
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $('input.row-select', node).is(':checked');
                                        },
                                        columns: ':visible',
                                        format: {
                                            body: (function () {
                                                let counter = 0;
                                                return function (data, row, column, node) {
                                                    data = typeof data === 'string'
                                                        ? data.replace(/<[^>]*>/g, '').trim()
                                                        : data;
                                                    if (column === 1) {
                                                        counter++;
                                                        return counter;
                                                    }
                                                    if (column === 3) {
                                                        // Convert to proper DD-MM-YYYY
                                                        if (moment(data, 'DD-MM-YYYY', true).isValid()) {
                                                            return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                                        }
                                                        // fallback if data is ISO or DB format
                                                        if (moment(data).isValid()) {
                                                            return moment(data).format('DD-MM-YYYY');
                                                        }
                                                        return data; // leave unchanged if not a date
                                                    }
                                                    return data;
                                                };
                                            })()
                                        }
                                    },
                                    title: 'GRN List',
                                    filename: function () {
                                        return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                                    }
                                }
                            ]
                        }
                    },
                    responsive: true,
                    paging: true,
                    searching: true,
                    ordering: true
                });

                // ✅ Master checkbox (select all)
                $('#selectAllNewTask').on('click', function () {
                    var checked = this.checked;
                    $('.row-select').prop('checked', checked);
                });




            } else {
                console.warn("No GRN ID provided, skipping DataTable init.");
            }
        });


        //this function used to  open modal of new task inspectionfrom is shown

        function openInspecForm(itemCode) {
            var inspecModal = new bootstrap.Modal(document.getElementById('inspecModal'));
            inspecModal.show();

            $('#inspecModalBody').html('<div class="text-center text-muted">Loading...</div>');
            $.ajax({
                url: '/Quality/InspecFormRG',
                type: 'GET',
                data: { id: itemCode },
                success: function (res) {
                    $('#inspecModalBody').html(res);

                    var item = $('#inspecModalBody').find('#itemcode').val();
                    loadParameters(item);
                },
                error: function () {
                    $('#inspecModalBody').html('<div class="text-danger text-center">Failed to load form.</div>');
                }
            });
        }

        //this function for load parameters
        function loadParameters(itemcode) {
            if (!itemcode) {
                console.warn('loadParameters: itemcode is empty');
                $('#inspecModalBody #tbody').html('<tr><td colspan="2" class="text-center text-muted">No item code</td></tr>');

                return;
            }

            console.log("Loading parameters for:", itemcode);


            //this is parameter grid load
            $.ajax({
                url: '/Quality/ParameterTableRG',
                type: 'GET',
                dataType: 'json',
                data: { id: itemcode },
                success: function (res) {
                    var $tbody = $('#inspecModalBody').find('#tbody');
                    $tbody.empty();

                    if (res && res.length > 0) {
                        res.forEach(function (item, idx) {
                            var param = item.Parameters || item.Parameter || '';
                            $tbody.append(
                                '<tr><td class="text-center">' + (idx + 1) + '</td>' +
                                '<td>' + param + '</td></tr>');
                        });
                    } else {
                        $tbody.append('<tr><td colspan="2" class="text-center text-muted">No parameters found</td></tr>');
                    }
                },
                error: function (xhr, status, err) {
                    console.error('ParameteRTable error:', err);
                    var $tbody = $('#inspecModalBody').find('#tbody');
                    $tbody.html('<tr><td colspan="2" class="text-danger text-center">Failed to load parameters</td></tr>');
                },


            });
        }




    </script>

</body>
</html>
