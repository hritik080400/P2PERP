@{
    ViewBag.Title = "Completed Tasks";
}

<input type="hidden" value="@ViewBag.GRN" name="GRNCode" id="GRNCode" />

<!-- Toast container -->
<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>

<div class="card shadow-lg rounded-3 border-0">
    <div class="card-body">
        <h5 class="card-title fw-semibold mb-3">Completed Tasks</h5>

        <div class="card shadow-sm rounded-3 mb-4 border-0">
            <div class="card-body">
                <div class="row g-3 align-items-center">
                    <div class="col-md-2">
                        <label for="grnno" class="col-form-label fw-semibold">GRN No:</label>
                    </div>
                    <div class="col-md-4">
                        <input type="text" id="grnno" value="@ViewBag.GRN"
                               name="GRNCode" class="form-control" readonly />
                    </div>
                    <div class="col-md-6 text-end">
                        <button type="button"
                                class="btn btn-primary text-white"
                                onclick="location.href='/Quality/IndexRG'">
                            Back
                        </button>
                    </div>
                </div>
            </div>
        </div>


        <div class="table-responsive">
            <table id="completedTaskTable"
                   class="table table-striped table-hover table-bordered align-middle text-center mb-0">
                <thead class="table-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAllCompleted" /></th>
                        <th>Sr.No</th>
                        <th>Item Code</th>
                        <th>Item Name</th>
                        <th>Item Type</th>
                        <th>Qty</th>
                        <th>Vendor Name</th>
                        <th>Assigned Date</th>
                        <th>Inspection Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // ✅ Toast function
    // ✅ Toast function
    function showToast(message, type = 'error') {
        // Map to Bootstrap contextual colors
        let icon = '';
        let progressColor = '';

        switch (type) {
            case 'success':
                icon = '<i class="bi bi-check-circle-fill me-2"></i>';
                progressColor = 'bg-light';
                break;
            case 'warning':
                icon = '<i class="bi bi-exclamation-triangle-fill me-2"></i>';
                progressColor = 'bg-dark';
                break;
            case 'info':
                icon = '<i class="bi bi-info-circle-fill me-2"></i>';
                progressColor = 'bg-light';
                break;
            default: // error
                icon = '<i class="bi bi-x-circle-fill me-2"></i>';
                progressColor = 'bg-light';
        }

        const toastId = `toast-${Date.now()}`;

        // ✅ Toast HTML with white text for all
        const toastHTML = `
<div id="${toastId}" class="toast align-items-center bg-${type} border-0 mb-2 shadow-lg"
         role="alert" aria-live="assertive" aria-atomic="true"
         data-bs-delay="3000" data-bs-animation="true">
        <div class="d-flex">
            <div class="toast-body d-flex align-items-center text-white">
                ${icon} ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto"
                    data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="progress" style="height: 3px; margin:0; background: rgba(255,255,255,0.3);">
    <div class="progress-bar" role="progressbar"></div>
</div>

</div>`;

        const $toast = $(toastHTML);
        $('#toastContainer').prepend($toast); // newestOnTop

        // ✅ Initialize bootstrap toast
        const toast = new bootstrap.Toast($toast[0], { delay: 3000 });
        toast.show();

        // ✅ Animate progress bar
        $toast.find('.progress-bar')
            .css({
                width: "100%",
                float: "right",
                backgroundColor: "black"
            })
            .animate(
                { width: "0%" },
                { duration: 3000, easing: "linear" }
            );



        // ✅ Auto-remove
        $toast.on('hidden.bs.toast', function () {
            $(this).remove();
        });
    }


    //this code for load completed task grid
    $(document).ready(function () {
        var id = $("#GRNCode").val();
        if (!id) return;

        var table = $('#completedTaskTable').DataTable({
            ajax: {
                url: '/Quality/CompletedTaskgridRRG',
                type: 'GET',
                data: { id: id },
                dataSrc: '' // controller returns List<Quality>
            },
            columns: [
                {
                    data: null,
                    orderable: false,
                    className: 'select-checkbox text-center',
                    render: function (data, type, row, meta) {
                        return `<input type="checkbox" class="row-select" value="${row.ItemCode}">`;
                    }
                },
                {
                    data: null,
                    render: function (data, type, row, meta) {
                        return meta.row + 1; // ✅ Sr.No
                    }
                },
                { data: 'ItemCode' },
                { data: 'ItemName' },
                { data: 'ItemType' },
                { data: 'Quantity' },
                { data: 'VendorName' },
                { data: 'AssignedDate' },
                { data: 'InspDate' },
                {
                    data: 'Status',
                    render: function (data) {
                        let badgeClass = '';
                        let statusText = (data || '').toLowerCase().trim(); // normalize to lowercase

                        switch (statusText) {
                            case 'confirmed':        // ✅ lowercase
                                badgeClass = 'bg-success';
                                break;
                            case 'non-confirmed':    // ✅ lowercase
                                badgeClass = 'bg-danger';
                                break;
                            default:
                                badgeClass = 'bg-secondary';
                        }

                        return `<span class="badge ${badgeClass}">${data}</span>`;
                    }

                }
            ],
            columnDefs: [
                { targets: "_all", className: "text-center" }
            ],
            layout: {
                topStart: {
                    buttons: [
                        //export print code
                        {
                            extend: 'print',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print Selected',
                            action: function (e, dt, button, config) {
                                if ($('#completedTaskTable .row-select:checked').length === 0) {
                                    showToast("Please select at least one row to print!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                },
                                columns: ':visible:not(:first-child):not(:last-child)',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'GRN List',
                            customize: function (win) {
                                // 🔹 Change title style
                                $(win.document.body).find('h1')
                                    .css('text-align', 'center')
                                    .css('font-size', '16pt')
                                    .css('font-weight', 'bold')
                                    .css('color', 'black');

                                // 🔹 Add generated date below title
                                $(win.document.body).prepend(
                                    `<div style="text-align:center; font-size:12pt; font-style:italic; margin-bottom:10px;">
                                       Generated on: ${new Date().toLocaleString()}
                                      </div>`
                                );

                                // 🔹 Style table headers
                                $(win.document.body).find('table thead th')
                                    .css('background-color', 'black')
                                    .css('color', 'white')
                                    .css('font-weight', 'bold')
                                    .css('text-align', 'center');
                            }
                        },
                        //export pdf code

                        {
                            extend: 'pdfHtml5',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                            titleAttr: 'Export to PDF',
                            action: function (e, dt, button, config) {
                                if ($('#completedTaskTable .row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                },
                                columns: ':visible:not(:first-child):not(:last-child)',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'GRN List',
                            filename: function () {
                                return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (doc) {
                                doc.styles.title = {
                                    fontSize: 16,
                                    bold: true,
                                    alignment: 'center',
                                    color: 'black',

                                };

                                doc.content.splice(1, 0, {
                                    text: 'Generated on: ' + new Date().toLocaleString(),
                                    fontSize: 12,
                                    italics: true,
                                    alignment: 'center',
                                    margin: [0, 0, 0, 10]
                                });
                                var tableNode = doc.content[doc.content.length - 1].table;
                                var headerCells = tableNode.body[0];
                                headerCells.forEach(function (cell) {
                                    cell.fillColor = 'black';
                                    cell.color = 'white';
                                    cell.bold = true;
                                    cell.alignment = 'center';
                                });
                                tableNode.layout = {
                                    paddingLeft: () => 30, paddingLeft: () => 6,

                                };
                                var colCount = tableNode.body[0].length;
                                tableNode.widths = new Array(colCount).fill('*'); // distribute evenly
                            }
                        },
                        //export excel code

                        {
                            extend: 'excelHtml5',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export to Excel',
                            action: function (e, dt, button, config) {
                                if ($('#completedTaskTable .row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                },
                                columns: ':visible',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'GRN List',
                            filename: function () {
                                return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (xlsx) {
                                var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                $('row:first c', sheet).attr('s', '2'); // ✅ bold header
                            }
                        },
                        //export csv code

                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export to CSV',
                            action: function (e, dt, button, config) {
                                if ($('#completedTaskTable .row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                },
                                columns: ':visible',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            if (column === 3) {
                                                // Convert to proper DD-MM-YYYY
                                                if (moment(data, 'DD-MM-YYYY', true).isValid()) {
                                                    return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                                }
                                                // fallback if data is ISO or DB format
                                                if (moment(data).isValid()) {
                                                    return moment(data).format('DD-MM-YYYY');
                                                }
                                                return data; // leave unchanged if not a date
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'GRN List',
                            filename: function () {
                                return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            }
                        }
                    ]
                }
            },
            responsive: true,
            paging: true,
            searching: true,
            ordering: true
        });

        // ✅ Master checkbox (select all in completedTask)
        $('#selectAllCompleted').on('click', function () {
            var checked = this.checked;
            $('#completedTaskTable .row-select').prop('checked', checked);
        });
    });
</script> 