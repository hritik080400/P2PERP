@{
    Layout = null;
    var rfq = (string)ViewBag.RFQCode ?? "";
    var pr = (string)ViewBag.PRCode ?? "";
    var hasUnregistered = Request.QueryString["hasUnregistered"] ?? "0";
}

<div class="container mt-4 shadow-sm rounded bg-white p-3">
    <!-- Page Heading -->
    <div class="text-center mb-3">
        <h2 class="text-primary fw-bold">All Quotations</h2>
    </div>

    <input type="hidden" id="rfqCode" value="@ViewBag.RFQCode" />

    <!-- Table -->
    <div class="table-responsive shadow-sm rounded">
        <table class="table table-striped table-hover table-bordered align-middle" id="quotationTable">
            <thead class="table-dark">
                <tr class="text-center">
                    <th><input type="checkbox" id="selectAll" /></th>
                    <th>Sr No</th>
                    <th>RFQ Code</th>
                    <th>Register Quotation Code</th>
                    <th>Vendor Name</th>
                    <th>Vendor Delivery Date</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody class="text-center"></tbody>
        </table>
    </div>
</div>

<div class="modal fade modal-wide" id="quotationDetailModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary  justify-content-center">
                <h5 class="modal-title fw-bold text-white mb-0">Quotation Details</h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="quotationDetailContent"></div>
        </div>
    </div>
</div>


<style>

    #quotationTable thead th {
        text-align: center !important;
        vertical-align: middle;
    }

    #quotationTable tbody td {
        font-size: 14px;
    }

    .dt-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }

    .dt-left {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .dataTables_paginate {
        float: right !important;
    }

    .dt-buttons .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 38px;
        height: 38px;
        border-radius: 50%;
        padding: 0;
    }

    .btn-icon-square {
        width: 36px;
        height: 36px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
    }

    #quotationTable td:nth-child(6) {
        text-align: center !important;
    }

    .modal-dialog {
        margin-top: 50px; 
    }

</style>


<script>
    $(document).ready(function () {
        $('[data-bs-toggle="tooltip"]').tooltip();

        //Toastr
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };

        //  Show toast
        function showToast(message, type = 'warning') {
            if (type === 'success') toastr.success(message);
            else if (type === 'error') toastr.error(message);
            else if (type === 'info') toastr.info(message);
            else toastr.warning(message);
        }

        //  Common export columns (skip checkbox=0 and Action=6)
        function exportColumns(idx) {
            return idx !== 0 && idx !== 6;
        }

        let quotationTable = $('#quotationTable').DataTable({
            dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>',
            buttons: [
                // Print
                {
                    extend: 'print',
                    title: 'Quotations',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    titleAttr: 'Print',
                    action: function (e, dt, button, config) {
                        if ($('.row-select:checked').length === 0) { showToast("Please select at least one Quotation to Print"); return; }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        columns: exportColumns,
                        rows: (idx, data, node) => $(node).find('.row-select').prop('checked')
                    },
                    customize: function (win) {
                        $(win.document.body).prepend(`<div style="text-align:center; font-size:12px; margin-bottom:10px;">Generated on: ${new Date().toLocaleString()}</div>`);
                        $(win.document.body).find('table').addClass('table table-bordered table-striped').css('font-size', '14px');
                        $(win.document.body).find('thead').css('background-color', '#0d6efd').css('color', 'white');
                        $(win.document.body).find('table tbody tr').each(function (i) { $(this).find('td:first').text(i + 1); });
                    }
                },
                // PDF
                {
                    extend: 'pdfHtml5',
                    title: 'Quotations',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    titleAttr: 'Export PDF',
                    action: function (e, dt, button, config) {
                        if ($('.row-select:checked').length === 0) { showToast("Please select at least one Quotation to export PDF"); return; }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        columns: exportColumns,
                        rows: (idx, data, node) => $(node).find('.row-select').prop('checked'),
                        format: {
                            body: function (data, rowIdx, colIdx) {
                                if (colIdx === 0) return rowIdx + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    customize: function (doc) {
                        doc.content[0].alignment = 'center';
                        doc.content[0].fontSize = 14;
                        var exportDate = new Date().toLocaleDateString('en-GB');
                        doc.content.splice(1, 0, { text: 'Export Date: ' + exportDate, alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                        var tableNode = doc.content.find(c => c.table);
                        if (!tableNode) return;
                        doc.styles = doc.styles || {};
                        doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                        doc.styles.tableBodyEven = { alignment: 'center' };
                        doc.styles.tableBodyOdd = { alignment: 'center' };
                        tableNode.layout = {
                            hLineWidth: () => .5, vLineWidth: () => .5,
                            hLineColor: () => '#dddddd', vLineColor: () => '#dddddd',
                            paddingLeft: () => 30, paddingRight: () => 6,
                            paddingTop: () => 4, paddingBottom: () => 4
                        };
                        tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                    }
                },
                // Excel
                {
                    extend: 'excelHtml5',
                    title: 'Quotations',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    titleAttr: 'Export Excel',
                    action: function (e, dt, button, config) {
                        if ($('.row-select:checked').length === 0) { showToast("Please select at least one Quotation to export Excel"); return; }
                        window.__excelSrCounter = 0;
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        columns: exportColumns,
                        rows: (idx, data, node) => $(node).find('.row-select').prop('checked'),
                        format: {
                            body: function (data, rowIdx, colIdx) {
                                if (colIdx === 1) { return ++window.__excelSrCounter; }
                                if (typeof data === 'string') { return data.replace(/<\/?[^>]+(>|$)/g, "").trim(); }
                                return data;
                            }
                        }
                    }
                },
                //  CSV
                {
                    extend: 'csvHtml5',
                    title: 'Quotations',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    titleAttr: 'Export CSV',
                    action: function (e, dt, button, config) {
                        if ($('#quotationTable .row-select:checked').length === 0) {
                            showToast("Please select at least one Quotation to export CSV", "warning");
                            return;
                        }
                        window.__srnoCounter = 0;
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        dt.processing(false);
                    },
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: function (idx) {
                            return idx !== 0 && idx !== 6;
                        },
                        format: {
                            body: function (data, rowIdx, colIdx) {
                                if (colIdx === 1) {
                                    if (!window.__srnoCounter) window.__srnoCounter = 0;
                                    return ++window.__srnoCounter;
                                }

                                // Vendor Delivery Date formatting ()
                                if (colIdx === 5) {
                                    if (moment(data, moment.ISO_8601, true).isValid()) {
                                        return moment(data).format("YYYY-MM-DD");
                                    }
                                    return data;
                                }

                                // Remove HTML tags from other columns
                                if (typeof data === 'string') return data.replace(/<[^>]*>/g, "").trim();
                                return data;
                            }
                        }
                    },
                    filename: function () {
                        return 'Quotations_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                    }
                }

            ],
            initComplete: function () {
                $('#quotationTable_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
            },
            processing: true,
            ajax: {
                url: '/Purchase/ViewRFQVNK',
                type: 'GET',
                data: { rfqCode: $("#rfqCode").val() },
                dataSrc: function (data) { return data; }
            },
            columns: [
                { data: null, orderable: false, className: "text-center", render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.RegisterQuotationCode}" />` },
                { data: null, className: "text-center", orderable: false, render: (d, t, r, meta) => meta.row + 1 },
                { data: 'RFQCode' },
                { data: 'RegisterQuotationCode' },
                { data: 'VendorName' },
                { data: 'VendorDeliveryDateVK', render: (d) => d ? moment(d).format("YYYY-MM-DD") : "" },
                {
                    data: 'RegisterQuotationCode',
                    orderable: false,
                    className: "text-center",
                    render: (d) => `
                        <a href="javascript:void(0)"
                           class="btn btn-sm btn-primary btn-icon-square btn-view-detail"
                           data-rq="${d}"
                           data-bs-toggle="tooltip"
                           title="View Quotation Details">
                            <i class="bi bi-eye-fill"></i>
                        </a>`
                }
            ]
        });

        // Select All
        $(document).on("change", "#selectAll", function () {
            $(".row-select").prop("checked", this.checked);
        });

        // View detail
        $(document).on("click", ".btn-view-detail", function () {
            let rqCode = $(this).data("rq");
            $("#quotationDetailContent").html("<div class='text-center p-3 small'>Loading...</div>");
            $.get("/Purchase/ViewQuotationDetailVNK", { rqCode: rqCode }, function (html) {
                $("#quotationDetailContent").html(html);
                $("#quotationDetailModal").modal("show");
            });
        });
    });

    // Keep blur when opening nested modal from inside rfqModal
    $(document).on('hidden.bs.modal', '.modal', function () {
        if ($('.modal.show').length) {
            $('body').addClass('modal-open');
        }
    });


</script>
