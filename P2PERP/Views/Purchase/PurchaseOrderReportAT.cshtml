@model IEnumerable<P2PLibray.Purchase.Purchase>

<div class="container mt-5">
    <!-- Date Range Picker -->
    <div class="row mb-3">
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-event"></i>
                </span>
                <input type="text" id="dateRange" class="form-control" placeholder="Select Date Range" />
            </div>
        </div>
    </div>

    <!-- Pie Chart + Total -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card p-3 shadow h-100">
                <h4 class="text-primary fw-bold text-center mb-3">Purchase Orders by Vendor</h4>
                <div id="poPieChart" style="height:350px;"></div>
            </div>
        </div>
        @*<div class="col-md-4">
            <div class="card p-3 shadow h-100 d-flex flex-column justify-content-center align-items-center">
                <h2 class="text-secondary mb-3">Total PO</h2>
                <h1 id="totalPOCount" class="text-primary fw-bold">0</h1>
            </div>
        </div>*@
    </div>

    <!-- Toast warning -->
    <div class="position-fixed top-0 end-0 p-3" style="z-index:1100">
        <div id="exportToast" class="toast align-items-center text-bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">⚠️ Select at least one row before exporting.</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="card p-3 shadow">
        <h3 class="mb-3">Purchase Order List</h3>
        <div class="table-responsive">
            <table id="poTable" class="table table-striped table-bordered nowrap w-100">
                <thead class="table-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAll" /></th>
                        <th>Sr.</th>
                        <th>PO Code</th>
                        <th>Vendor Name</th>
                        <th>Company Name</th>
                        <th>Added By</th>
                        <th>Approved By</th>
                        <th>Approved Date</th>
                        <th>Item Name</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td><input type="checkbox" class="rowCheckbox" value="@item.POCode" /></td>
                            <td></td> <!-- serial number filled by JS -->
                            <td>@item.POCode</td>
                            <td>@item.VendorName</td>
                            <td>@item.VendorCompanyName</td>
                            <td>@item.AddedByName</td>
                            <td>@item.ApprovedRejectedByName</td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.ApprovedRejectedDate.ToString())
                                    && DateTime.TryParse(item.ApprovedRejectedDate.ToString(), out DateTime approveDate))
                                {
                                    @approveDate.ToString("dd-MM-yyyy")
                                }
                                else
                                {
                                    @("-")
                                }
                            </td>
                            <td>@item.ItemName</td>
                            <td>@item.StatusName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    #poTable th, #poTable td {
        text-align: center !important;
        vertical-align: middle !important;
    }
</style>


<script>


    var table, poChart;
    var startDate = null, endDate = null;

    $(document).ready(function () {

        function showExportToast() {
            new bootstrap.Toast(document.getElementById('exportToast')).show();
        }

        table = $('#poTable').DataTable({
            scrollX: false,
            autoWidth: false,
            dom: "<'row mb-2'<'col-6'B><'col-6 text-end'f>>" +
                "<'row'<'col-12'tr>>" +
                "<'row mt-2'<'col-5'i><'col-7 text-end'p>>",
            columnDefs: [
                { targets: 0, orderable: false, searchable: false }, // checkbox
                { targets: 1, orderable: false, searchable: false }, // Sr
                { targets: 5, visible: false } // hide Added By but exportable
            ],
            order: [[9, 'asc'], [2, 'asc']],
            buttons: [
                {
                    extend: 'print',
                    title: 'Purchase Order List',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) return '';
                                if (column === 1) return row + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) { showExportToast(); return; }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    }
                },
                {
                    extend: 'pdfHtml5',
                    title: 'Purchase Order List',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) return '';
                                if (column === 1) return row + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) { showExportToast(); return; }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    
                    customize: function (doc) {
                        doc.content[0].alignment = 'center';
                        doc.content[0].fontSize = 14;
                        var exportDate = new Date().toLocaleDateString('en-GB');
                        doc.content.splice(1, 0, {
                            text: 'Export Date: ' + exportDate,
                            alignment: 'center',
                            margin: [0, 0, 0, 8],
                            fontSize: 10
                        });
                        doc.styles.tableHeader.alignment = 'center';
                        doc.styles.tableHeader.fillColor = '#212529';
                        doc.styles.tableHeader.color = '#ffffff';
                        doc.styles.tableHeader.bold = true;
                        var objLayout = {};
                        objLayout['hLineWidth'] = function () { return 0.5; };
                        objLayout['vLineWidth'] = function () { return 0.5; };
                        objLayout['hLineColor'] = function () { return '#aaa'; };
                        objLayout['vLineColor'] = function () { return '#aaa'; };
                        objLayout['paddingLeft'] = function () { return 4; };
                        objLayout['paddingRight'] = function () { return 4; };
                        doc.content[doc.content.length - 1].layout = objLayout;
                    }
                },
                {
                    extend: 'excelHtml5',
                    title: 'Purchase_Order_List',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) return '';
                                if (column === 1) return row + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) { showExportToast(); return; }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },
                {
                    extend: 'csvHtml5',
                    title: 'Purchase_Order_List',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) return '';
                                if (column === 1) return row + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) { showExportToast(); return; }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                },
                'colvis'
            ]
        });

        // Fill serial number
        table.on('draw.dt', function () {
            var pageInfo = table.page.info();
            table.column(1, { page: 'current' }).nodes().each(function (cell, i) {
                cell.innerHTML = pageInfo.start + i + 1;
            });
        }).draw();

        // Date filter (Approved Date index 7)
        $.fn.dataTable.ext.search.push(function (settings, data) {
            var approveDateStr = data[7];
            if (!approveDateStr || approveDateStr === '-') return true;
            var parts = approveDateStr.split("-");
            var approveDate = new Date(parts[2], parts[1] - 1, parts[0]);
            if (startDate && approveDate < startDate) return false;
            if (endDate && approveDate > endDate) return false;
            return true;
        });

        // Checkbox logic
        $(document).on('change', '#selectAll', function () {
            var checked = this.checked;
            $('.rowCheckbox').prop('checked', checked);
        });
        $(document).on('change', '.rowCheckbox', function () {
            $('#selectAll').prop('checked', $('.rowCheckbox:checked').length === $('.rowCheckbox').length);
        });

        // Date Range Picker
        $('#dateRange').daterangepicker({
            autoUpdateInput: false,
            alwaysShowCalendars: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD-MM-YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end, label) {
            startDate = start.toDate();
            endDate = end.toDate();
            $('#dateRange').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));
            table.draw();
        });
        $('#dateRange').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range');
            startDate = null; endDate = null; table.draw();
        });
        $('#dateRange').val('Select Date Range');

        // Highcharts update
        //function buildChart(data) {
        //    var dataArray = [];
        //    for (var key in data) dataArray.push({ name: key, y: data[key] });
        //    poChart = Highcharts.chart('poPieChart', {
        //        chart: { type: 'pie' },
        //        title: { text: 'Purchase Orders by Vendor' },
        //        plotOptions: { pie: { allowPointSelect: true, cursor: 'pointer', dataLabels: { enabled: true, format: '<b>{point.name}</b>: {point.y}' } } },
        //        series: [{ name: 'Count', colorByPoint: true, data: dataArray }]
        //    });
        //}

        function buildChart(data) {
            var dataArray = [];
            var totalCount = 0;
            for (var key in data) {
                totalCount += data[key];
                dataArray.push({ name: key, y: data[key] });
            }

            poChart = Highcharts.chart('poPieChart', {
                chart: {
                    type: 'pie',
                    events: {
                        load: function () {
                            // draw the total count on first load
                            var chart = this;
                            if (chart.totalLabel) chart.totalLabel.destroy();
                            chart.totalLabel = chart.renderer.text(
                                'Total: ' + totalCount,
                                20, // x position
                                40  // y position
                            )
                                .css({
                                    color: '#000000',
                                    fontSize: '32px',
                                    fontWeight: 'bold'
                                })
                                .add();
                        }
                    }
                },
                title: { text: 'Purchase Orders by Vendor' },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: { enabled: true, format: '<b>{point.name}</b>: {point.y}' },
                        point: {
                            events: {
                                click: function () {
                                    var vendorName = this.name;
                                    table.column(3).search(vendorName).draw();
                                }
                            }
                        }
                    }
                },
                series: [{ name: 'Count', colorByPoint: true, data: dataArray }]
            });
        }


        $('#poPieChart').on('dblclick', function () {
            table.column(3).search('').draw(); // clear filter
        });


        //function updateChart() {
        //    var vendorCounts = {};
        //    table.rows({ filter: 'applied' }).every(function () {
        //        var vendor = this.data()[3] || "Unknown";
        //        vendorCounts[vendor] = (vendorCounts[vendor] || 0) + 1;
        //    });
        //    if (poChart) {
        //        var newData = [];
        //        for (var key in vendorCounts) newData.push({ name: key, y: vendorCounts[key] });
        //        poChart.series[0].setData(newData, true);
        //    } else { buildChart(vendorCounts); }
        //}

        function updateChart() {
            var vendorCounts = {};
            var totalCount = 0;
            table.rows({ filter: 'applied' }).every(function () {
                var vendor = this.data()[3] || "Unknown";
                vendorCounts[vendor] = (vendorCounts[vendor] || 0) + 1;
                totalCount++;
            });

            var newData = [];
            for (var key in vendorCounts) newData.push({ name: key, y: vendorCounts[key] });

            if (poChart) {
                poChart.series[0].setData(newData, true);

                // 🟢 Update total count label
                if (poChart.totalLabel) poChart.totalLabel.destroy();
                poChart.totalLabel = poChart.renderer.text(
                    'Total: ' + totalCount,
                    20,
                    40
                )
                    .css({
                        color: '#000000',
                        fontSize: '32px',
                        fontWeight: 'bold'
                    })
                    .add();
            } else {
                buildChart(vendorCounts);
            }
        }







        //function updateTotalCount() {
        //    $('#totalPOCount').text(table.rows({ filter: 'applied' }).count());
        //}
        updateChart();
        updateTotalCount();
        table.on('draw', function () { updateChart(); updateTotalCount(); });
    });
</script>
