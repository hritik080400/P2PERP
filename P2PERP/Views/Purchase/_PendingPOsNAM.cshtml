@* Partial view for Pending Purchase Orders *@
<!-- Header -->
<div class="text-center mb-3">
    <h2 class="text-primary fw-bold">Pending Purchase Order</h2>
</div>
<div class="card shadow-sm">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover table-bordered mb-0" id="tblPending">
                <thead class="table-dark">
                    <tr>
                        <th class="text-center"><input type="checkbox" id="selectAllPending" /></th>
                        <th class="text-center">SR NO</th>
                        <th class="text-center">PO NO</th>
                        <th class="text-center">PO Date</th>
                        <th class="text-center">PO Cost</th>
                        <th class="text-center">Created By</th>
                        <th class="text-center">Status</th>
                        <th class="text-center">Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</div>

<!-- Toast container -->
<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index:2000;"></div>

<!-- Modal for PO details -->
<div class="modal fade" id="poModal" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title w-100 text-center" style="color:white;">Pending Purchase Order Details Screen</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="poModalBody"></div>
        </div>
    </div>
</div>


    <script>
        $(function () {
            let pendingTable;

            // Toast Notification
            function showToast(message, type = 'warning') {
                const toastHTML = `<div class="toast align-items-center text-white bg-${type} border-0 mb-2" role="alert">
                    <div class="d-flex">
                        <div class="toast-body small">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>`;
                const $toast = $(toastHTML);
                $('#toastContainer').append($toast);
                new bootstrap.Toast($toast[0], { delay: 3000 }).show();
                $toast.on('hidden.bs.toast', function () { $(this).remove(); });
            }

            // Load DataTable
            function loadPendingPOs() {
                // Destroy existing DataTable if initialized
                if ($.fn.DataTable.isDataTable('#tblPending')) {
                    $('#tblPending').DataTable().destroy();
                    $('#tblPending tbody').empty(); // clear old data
                }

                pendingTable = $('#tblPending').DataTable({
                    dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rtip',
                    ajax: { url: '/Purchase/GetPendingPOsNAM', dataSrc: '' },
                    columns: [
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.POCode}"/>` },
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r, meta) => meta.row + 1 },
                        { data: 'POCode' },
                        { data: 'PODateVK', defaultContent: '' },
                        { data: 'POCost', defaultContent: '' },
                        { data: 'CreatedBy', defaultContent: '' },
                        { data: 'StatusName', render: d => `<span class="badge badge-pending">${d || 'Pending'}</span>` },
                        {
                            data: 'POCode', orderable: false, className: 'text-center', render: d =>
                                `<button class="btn btn-sm btn-success btn-approve" data-pocode="${d}">Approve</button>
                     <button class="btn btn-sm btn-view" data-pocode="${d}" title="View"><i class="bi bi-eye-fill"></i></button>`
                        }
                    ],
                    buttons: [
                        {
                            extend: 'print',
                            title: 'Pending Purchase Orders',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print',
                            action: function (e, dt, button, config) {
                                if ($('.row-select:checked').length === 0) { showToast("Please select at least one row to Print"); return; }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            },
                            exportOptions: { rows: idx => $('.row-select').eq(idx).prop('checked'), columns: [1, 2, 3, 4, 5, 6] },
                            customize: function (win) {
                                $(win.document.body).find('table').addClass('table table-bordered table-striped').css('font-size', '14px');
                                $(win.document.body).find('thead').css('background-color', '#0d6efd').css('color', 'white');
                                $(win.document.body).find('table tbody tr').each(function (i) { $(this).find('td:first').text(i + 1); });
                            }
                        },
                        {
                            extend: 'pdfHtml5',
                            title: 'Pending Purchase Orders',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                            titleAttr: 'Export PDF',
                            action: function (e, dt, button, config) {
                                if ($('.row-select:checked').length === 0) { showToast("Please select at least one row to export PDF"); return; }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: { rows: idx => $('.row-select').eq(idx).prop('checked'), columns: [1, 2, 3, 4, 5, 6] },
                            customize: function (doc) {
                                doc.styles.tableHeader.fillColor = '#0d6efd';
                                doc.styles.tableHeader.color = 'white';
                                doc.styles.tableHeader.alignment = 'center';
                                const body = doc.content[1].table.body;
                                for (let i = 1; i < body.length; i++) { body[i][0].text = i; }
                            }
                        },
                        {
                            extend: 'excelHtml5',
                            title: 'Pending Purchase Orders',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export Excel',
                            action: function (e, dt, button, config) {
                                if ($('.row-select:checked').length === 0) { showToast("Please select at least one row to export Excel"); return; }
                                window.__excelSrCounter = 0;
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                rows: idx => $('.row-select').eq(idx).prop('checked'),
                                columns: [1, 2, 3, 4, 5, 6],
                                format: {
                                    body: function (data, rowIdx, colIdx, node) {
                                        if (colIdx === 0) { window.__excelSrCounter++; return window.__excelSrCounter; }
                                        return node ? $(node).text().trim() : $('<div>').html(data).text().trim();
                                    }
                                }
                            },
                            customize: function () { window.__excelSrCounter = 0; }
                        },
                        {
                            extend: 'csvHtml5',
                            title: 'Pending Purchase Orders',
                            text: '<i class="bi bi-filetype-csv text-primary fs-5"></i>',
                            titleAttr: 'Export CSV',
                            action: function (e, dt, button, config) {
                                if ($('.row-select:checked').length === 0) { showToast("Please select at least one row to export CSV"); return; }
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: { rows: idx => $('.row-select').eq(idx).prop('checked'), columns: [1, 2, 3, 4, 5, 6] }
                        }
                    ],
                    initComplete: function () {
                        $('#tblPending_filter input').addClass("form-control").attr("placeholder", "Search...");
                    }
                });
            }


            // Checkbox select all
            $(document).on('change', '#selectAllPending', function () { $('.row-select').prop('checked', this.checked); });

            // View details
            $('#tblPending').on('click', '.btn-view', function () {
                const poCode = $(this).data('pocode');
                $("#poModalBody").html("<div class='text-center p-3 small'>Loading...</div>");
                $.get("/Purchase/ViewPendingPoDetailsNAM", { poCode }, function (html) { $("#poModalBody").html(html); $("#poModal").modal('show'); });
            });

            // Approve PO
            $('#tblPending').on('click', '.btn-approve', function () {
                const poCode = $(this).data('pocode');
                Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to approve PO " + poCode + "?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, approve it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.get('/Purchase/ApprovePONAM', { poCode: poCode }, function (res) {
                            if (res.success) {
                                Swal.fire('Approved!', 'PO ' + poCode + ' has been approved.', 'success');
                                $('#poModal').modal('hide');
                                pendingTable.ajax.reload();
                            } else {
                                Swal.fire('Error!', 'Failed to approve PO.', 'error');
                            }
                        });
                    }
                });
            });

            // Date filter
            $(document).on('focus', '#PendingDatepicker', function () {
                if (!$(this).data('daterangepicker')) {
                    $(this).daterangepicker({
                        autoUpdateInput: false,
                        opens: "center",
                        drops: "down",
                        alwaysShowCalendars: true,
                        locale: { cancelLabel: 'Clear' },
                        ranges: {
                            'Today': [moment(), moment()],
                            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                            'This Month': [moment().startOf('month'), moment().endOf('month')],
                            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                        }
                    }, function (start, end) {
                        $('#PendingDatepicker').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
                        $.fn.dataTable.ext.search.push(function (settings, data) {
                            if (settings.nTable.id !== 'tblPending') return true;
                            const poDate = moment(data[3], 'YYYY-MM-DD');
                            return poDate.isBetween(start, end, undefined, '[]');
                        });
                        pendingTable.draw();
                        $.fn.dataTable.ext.search.pop();
                    });

                    $('#PendingDatepicker').on('cancel.daterangepicker', function () { $(this).val(''); pendingTable.draw(); });
                }
            });
        });
    </script>
}

<style>
    .modal-backdrop {
        display: none;
    }

    .badge-status {
        font-size: 12px;
        padding: 0.35em 0.5em;
        font-weight: 500;
    }

    .badge-pending {
        background-color: #ffc107;
        color: #212529;
    }

    .badge-approved {
        background-color: #28a745;
        color: white;
    }

    .btn-view {
        background-color: mediumpurple;
        border-color: mediumpurple;
        color: white;
        margin-left: 40px;
    }

        .btn-view:hover {
            background-color: darkviolet;
            border-color: darkviolet;
            color: white;
        }
</style>

