@* Partial view for Pending Purchase Orders *@
<!-- Header -->
<html>

<head>
    <style>

        .badge-status {
            font-size: 12px;
            padding: 0.35em 0.5em;
            font-weight: 500;
        }

        .badge-pending {
            background-color: #ffc107;
            color: #212529;
        }

        .badge-approved {
            background-color: #28a745;
            color: white;
        }

        .btn-view {
            background-color: mediumpurple;
            border-color: mediumpurple;
            color: white;
            margin-left: 40px;
        }

            .btn-view:hover {
                background-color: darkviolet;
                border-color: darkviolet;
                color: white;
            }
    </style>

</head>
<body>
    <div class="text-center mb-3">
        <h3 class="text-primary fw-bold">Pending Purchase Order</h3>
    </div>
    <div class="card shadow-sm">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover table-bordered mb-0" id="tblPending">
                    <thead class="table-dark">
                        <tr>
                            <th class="text-center"><input type="checkbox" id="selectAllPending" /></th>
                            <th class="text-center">SR NO</th>
                            <th class="text-center">PO NO</th>
                            <th class="text-center">PO Date</th>
                            <th class="text-center">PO Cost</th>
                            <th class="text-center">Created By</th>
                            <th class="text-center">Status</th>
                            <th class="text-center">Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Toast container -->
    <div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index:2000;"></div>

    <div class="modal fade" id="poModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog modal-xl modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h2 class="modal-title w-100 text-center">Pending Purchase Order Details Screen</h2>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="poModalBody"></div>
            </div>
        </div>
    </div>



    <script>
        $(function () {
            let pendingTable;

            // Toast Notification
            function showToast(message, type = 'warning') {
                const toastHTML = `<div class="toast align-items-center text-white bg-${type} border-0 mb-2" role="alert">
                        <div class="d-flex">
                            <div class="toast-body small">${message}</div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                        </div>
                    </div>`;
                const $toast = $(toastHTML);
                $('#toastContainer').append($toast);
                new bootstrap.Toast($toast[0], { delay: 3000 }).show();
                $toast.on('hidden.bs.toast', function () { $(this).remove(); });
            }

            // Load DataTable
            function loadPendingPOs() {
                // Destroy existing DataTable if initialized
                if ($.fn.DataTable.isDataTable('#tblPending')) {
                    $('#tblPending').DataTable().destroy();
                    $('#tblPending tbody').empty(); // clear old data
                }

                const pendingTable = $('#tblPending').DataTable({
                    dom: '<"d-flex justify-content-between mb-2 flex-wrap align-items-center"<"dt-buttons"B><"dt-search"f>>rt<"d-flex justify-content-between align-items-center mt-2"ip>', buttons: [

                        // Print
                        {
                            extend: 'print',
                            title: '',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print',
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) {
                                    showToast("Please select at least one PO to Print");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked')
                            },
                            customize: function (win) {
                                const title = 'Purchase Orders';
                                const today = new Date();
                                const formattedDate = today.toLocaleDateString('en-GB');

                                $(win.document.body).prepend(`
        <div style="text-align:center; margin-bottom:10px;">
            <h2 style="margin:0;">${title}</h2>
            <div style="font-size:12px;">Generated on: ${formattedDate}</div>
        </div>
`);

                                $(win.document.body).append(`
        <style>
            thead th {
                background-color: black !important;
                color: white !important;
                text-align: center !important;
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
            table {
                border-collapse: collapse !important;
                width: 100% !important;
            }
            td, th {
                border: 1px solid #000 !important;
                padding: 6px !important;
            }
        </style>
`);

                                $(win.document.body).find('table')
                                    .addClass('table table-bordered table-striped')
                                    .css('width', '100%')
                                    .css('font-size', '14px');

                                $(win.document.body).find('table tbody tr').each(function (i) {
                                    $(this).find('td:first').text(i + 1);
                                });
                            }
                        },
                        // PDF, Excel, CSV (unchanged)
                        {
                            extend: 'pdfHtml5', title: 'Purchase Orders',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>', titleAttr: 'Export PDF',
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) { showToast("Please select at least one PO to export PDF"); return; }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                                format: { body: (data, row, col) => typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data }
                            },
                            customize: function (doc) {
                                doc.content[0].alignment = 'center'; doc.content[0].fontSize = 14;
                                doc.content.splice(1, 0, { text: 'Export Date: ' + new Date().toLocaleDateString('en-GB'), alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                                var tableNode = doc.content.find(c => c.table); if (!tableNode) return;
                                doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                                tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                                tableNode.layout = { paddingLeft: () => 30, paddingRight: () => 6 };
                            }
                        },
                        {
                            extend: 'excelHtml5',
                            title: '',
                            filename: 'pending Purchase Orders',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export Excel',
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) {
                                    showToast("Please select at least one PO to export Excel");
                                    return;
                                }
                                window.__excelSrCounter = 0;
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                                format: {
                                    body: function (data, rowIdx, colIdx, node) {
                                        if (colIdx === 1) return ++window.__excelSrCounter;
                                        return typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data;
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export CSV',
                            title: '',
                            filename: function () { return 'PurchaseOrders_' + new Date().toISOString().slice(0, 10).replace(/-/g, ""); },
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) { showToast("Please select at least one row to export CSV"); return; }
                                window.__srnoCounter = 0;
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false);
                            },
                            exportOptions: {
                                rows: function (idx, data, node) { return $(node).find('.row-select').prop('checked'); },
                                columns: exportColumns,
                                format: {
                                    body: function (data, row, column, node) {
                                        data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                        if (column === 1) return ++window.__srnoCounter;
                                        return data;
                                    }
                                }
                            }
                        }

                    ], initComplete: function () {
                        $('#tblPending_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
                        // Add date filter container only once
                        if ($('#pendingDateFilterContainer').length === 0) {
                            $('<div id="pendingDateFilterContainer" class="mb-2"></div>').prependTo($('#tblPending_wrapper .dt-left').length ? '#tblPending_wrapper .dt-left' : '#tblPending_wrapper');
                            $('#pendingDateFilterContainer').html(`
                                <div class="input-group" style="height: 40px; max-width: 280px;">
                                    <span class="input-group-text bg-primary text-white"><i class="bi bi-calendar-date"></i></span>
                                    <input type="text" id="PendingDatepicker" class="form-control" placeholder="Select date range" readonly />
                                </div>
                            `);
                        }
                    },
                    processing: true, serverSide: false,
                    ajax: { url: '/Purchase/GetPendingPOsNAM', dataSrc: '' },
                    columns: [
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.POCode}"/>` },
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r, meta) => meta.row + 1 },
                        { data: 'POCode', className: 'text-center' },
                        {
                            data: 'PODateVK', defaultContent: '', className: 'text-center',
                            render: d => d ? moment(d).format('DD/MM/YYYY') : ''
                        },
                        { data: 'POCost', defaultContent: '' },
                        { data: 'CreatedBy', defaultContent: '' },
                        { data: 'StatusName', render: d => `<span class="badge badge-pending">${d || 'Pending'}</span>` },
                        {
                            data: 'POCode', orderable: false, className: 'text-center', render: d => `
                    <button class="btn btn-sm btn-success btn-approve" data-pocode="${d}">Approve</button>
                    <button class="btn btn-sm btn-view" data-pocode="${d}" title="View"><i class="bi bi-eye-fill"></i></button>`
                        }
                    ]
                });
                // delegated handlers for elements inside pending table
                // Select-all for pending (checkbox inside header)
                $(document).off('change', '#selectAllPending').on('change', '#selectAllPending', function () {
                    $('#tblPending .row-select').prop('checked', this.checked);
                });

                // view details (delegate)
                $(document).off('click', '#tblPending .btn-view').on('click', '#tblPending .btn-view', function () {
                    //alert("clicked")
                    $("#NewModalBody").empty();
                    $("#POModalBody").empty();
                    const poCode = $(this).data('pocode');
                    $("#poModalBody").html("<div class='text-center p-3 small'>Loading...</div>");
                    $.get("/Purchase/ViewPendingPoDetailsNAM", { poCode }, function (html) {
                        $("#poModalBody").html(html);
                        $("#poModal").modal('show');
                    });
                });





                // approve
                $(document).off('click', '#tblPending .btn-approve').on('click', '#tblPending .btn-approve', function () {
                    const poCode = $(this).data('pocode');
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "Do you want to approve PO " + poCode + "?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, approve it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.get('/Purchase/ApprovePONAM', { poCode: poCode }, function (res) {
                                if (res.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'PO ' + poCode + ' is approved successfully',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                    $('#poModal').modal('hide');
                                    $('#tblPending').DataTable().ajax.reload();
                                } else {
                                    Swal.fire('Error!', 'Failed to approve PO.', 'error');
                                }
                            });
                        }
                    });
                });

                // Pending: date filter initialization (delegated to focus event)
                $(document).off('focus', '#PendingDatepicker').on('focus', '#PendingDatepicker', function () {
                    const $this = $(this);
                    if (!$this.data('daterangepicker')) {
                        $this.daterangepicker({
                            autoUpdateInput: false,
                            opens: "center",
                            drops: "down",
                            alwaysShowCalendars: true,
                            locale: { cancelLabel: 'Clear' },
                            ranges: {
                                'Today': [moment(), moment()],
                                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                                'This Month': [moment().startOf('month'), moment().endOf('month')],
                                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                            }
                        }, function (start, end) {
                            $this.val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
                            $.fn.dataTable.ext.search.push(function (settings, data) {
                                if (settings.nTable.id !== 'tblPending') return true;
                                const poDate = moment(data[3], 'YYYY-MM-DD');
                                return poDate.isBetween(start, end, undefined, '[]');
                            });
                            $('#tblPending').DataTable().draw();
                            $.fn.dataTable.ext.search.pop();
                        });

                        $this.on('cancel.daterangepicker', function () { $this.val(''); $('#tblPending').DataTable().draw(); });
                    }
                });
            }
    </script>
</body>

    </html>


