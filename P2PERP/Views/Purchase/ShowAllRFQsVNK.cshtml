@{
    ViewBag.Title = "ShowAllRFQsVNK";
}

<div class="main-content">
    <div class="container mt-4 shadow-sm rounded bg-white p-3">
        <!-- Header -->
        <div class="text-center mb-3">
            <h2 class="text-primary fw-bold">All RFQs</h2>
        </div>

        <!-- Table -->
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-striped table-hover table-bordered align-middle" id="tblRFQ">
                <thead class="table-dark">
                    <tr class="text-center">
                        <th><input type="checkbox" id="selectAll" /></th>
                        <th>Sr No</th>
                        <th>RFQ Code</th>
                        <th>Added Date</th>
                        <th>Added By</th>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody class="text-center"></tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="rfqModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white justify-content-center">
                <h5 class="modal-title fw-bold text-white mb-0">Quotation List</h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="rfqModalContent"></div>
        </div>
    </div>
</div>

<style>

    /* Blur effect for page content when modal is open */
    body.modal-open .main-content::after {
        content: '';
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040; 
        pointer-events: none;
    }

    /* Make modals appear above navbar */
    .modal {
        z-index: 1060 !important; 
    }

    /* Push modals a bit below navbar */
    .modal-dialog {
        margin-top: 80px; 
    }

    /* Wide modal for nested modals */
    .modal-wide .modal-dialog {
        max-width: 1200px;
        margin-top: 80px;
    }



    .modal-backdrop {
        display: none;
    }

    body.modal-open .main-content {
        position: relative;
    }


    #tblRFQ thead th, #tblRFQ tbody td {
        text-align: center !important;
        vertical-align: middle;
    }

    #tblRFQ tbody td {
        font-size: 14px;
    }

    .dt-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }

    .dt-left {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .dataTables_paginate {
        float: right !important;
    }

    .dt-buttons .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 38px;
        height: 38px;
        border-radius: 50%;
        padding: 0;
    }

    .btn-icon-square {
        width: 36px;
        height: 36px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
    }

    .btn-view {
        background-color: mediumpurple;
        border-color: mediumpurple;
        color: white;
        margin-left: 6px;
    }

        .btn-view:hover {
            background-color: darkviolet;
            border-color: darkviolet;
            color: white;
        }

    .modal-dialog {
        margin-top: 100px;
    }

</style>


<script>
    $(document).ready(function () {
        // Initialize tooltips
        $('[data-bs-toggle="tooltip"]').tooltip();

        function formatDateOnly(dateValue) {
            if (!dateValue) return "";
            let d = new Date(dateValue);
            if (isNaN(d)) return dateValue;
            return d.toISOString().split("T")[0];
        }

        //  Toastr 
        toastr.options = {
            closeButton: true, progressBar: true, newestOnTop: true,
            positionClass: "toast-top-right", preventDuplicates: true,
            timeOut: 3000, extendedTimeOut: 1000,
            showDuration: 300, hideDuration: 300,
            showMethod: "slideDown", hideMethod: "fadeOut"
        };

        function showToast(message, type = 'warning') {
            if (type === 'success') toastr.success(message);
            else if (type === 'error') toastr.error(message);
            else if (type === 'info') toastr.info(message);
            else toastr.warning(message);
        }

        function exportColumns(idx) { return idx !== 0 && idx !== 6; }

        //search
        let rfqTable = $('#tblRFQ').DataTable({
            dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>',
            buttons: [
                {
                    //print
                    extend: 'print', title: 'All RFQs',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>', titleAttr: 'Print',
                    action: function (e, dt, button, config) {
                        if ($('.row-select:checked').length === 0) { showToast("Please select at least one RFQ to Print"); return; }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    exportOptions: { columns: exportColumns, rows: (idx, d, node) => $(node).find('.row-select').prop('checked') },
                    customize: function (win) {
                        $(win.document.body).prepend(`<div style="text-align:center; font-size:12px; margin-bottom:10px;">Generated on: ${new Date().toLocaleString()}</div>`);
                        $(win.document.body).find('table').addClass('table table-bordered table-striped').css('font-size', '14px');
                        $(win.document.body).find('thead').css('background-color', '#0d6efd').css('color', 'white');
                        $(win.document.body).find('table tbody tr').each(function (i) { $(this).find('td:first').text(i + 1); });
                    }
                },
                {
                    //pdf
                    extend: 'pdfHtml5', title: 'All RFQs',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>', titleAttr: 'Export PDF',
                    action: function (e, dt, button, config) {
                        if ($('.row-select:checked').length === 0) { showToast("Please select at least one RFQ to export PDF"); return; }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        columns: exportColumns,
                        rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                        format: { body: (data, row, col) => typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data }
                    },
                    customize: function (doc) {
                        doc.content[0].alignment = 'center'; doc.content[0].fontSize = 14;
                        doc.content.splice(1, 0, { text: 'Export Date: ' + new Date().toLocaleDateString('en-GB'), alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                        var tableNode = doc.content.find(c => c.table); if (!tableNode) return;
                        doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                        tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                        tableNode.layout = { paddingLeft: () => 30, paddingRight: () => 6 };
                    }
                },
                {
                    //excel
                    extend: 'excelHtml5', title: 'All RFQs',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>', titleAttr: 'Export Excel',
                    action: function (e, dt, button, config) {
                        if ($('.row-select:checked').length === 0) { showToast("Please select at least one RFQ to export Excel"); return; }
                        window.__excelSrCounter = 0;
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    },
                    exportOptions: {
                        columns: exportColumns,
                        rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                        format: { body: (data, row, col) => col === 1 ? ++window.__excelSrCounter : (typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data) }
                    }
                },
                {
                    //csv
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    titleAttr: 'Export to CSV',
                    action: function (e, dt, button, config) {
                        if ($('#tblRFQ .row-select:checked').length === 0) {
                            showToast("Please select at least one row to export!", "warning");
                            return;
                        }
                        window.__srnoCounter = 0; 
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        dt.processing(false); 
                    },
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: function (idx) {
                            return idx !== 0 && idx !== 6;
                        },
                        format: {
                            body: (function () {
                                return function (data, row, column, node) {
                                    data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;

                                    // SR NO in column
                                    if (column === 1) {
                                        if (!window.__srnoCounter) window.__srnoCounter = 0;
                                        return ++window.__srnoCounter;
                                    }

                                    // Added Date formatting
                                    if (column === 3) {
                                        if (moment(data, 'DD-MM-YYYY', true).isValid()) return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                        if (moment(data).isValid()) return moment(data).format('DD-MM-YYYY');
                                        return data;
                                    }

                                    return data;
                                };
                            })()
                        }
                    },
                    title: 'All RFQs',
                    filename: function () {
                        return 'RFQ_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                    }
                }

            ],
            initComplete: function () {
                $('#tblRFQ_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
            },
            processing: true,
            ajax: { url: '/Purchase/AllRFQVNK', type: 'GET', dataSrc: d => d },
            columns: [
                { data: null, orderable: false, className: "text-center", render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.RFQCode}" />` },
                { data: null, className: "text-center", orderable: false, render: (d, t, r, meta) => meta.row + 1 },
                { data: 'RFQCode' },
                { data: 'AddedDateVK', render: (d) => formatDateOnly(d) },
                { data: 'FullName' },
                { data: 'Description', render: (d) => `<span data-bs-toggle="tooltip" title="${d}">${d}</span>` },
                {
                    data: null, orderable: false,
                    render: function (row) {
                        let registerBtn = '';
                        if (row.HasUnregisteredVendors && Number(row.HasUnregisteredVendors) === 1) {
                            registerBtn = `<a class="btn btn-sm btn-success ms-1"
            href="/Purchase/RegisterQuotationVNK?rfqCode=${encodeURIComponent(row.RFQCode)}&prCode=${encodeURIComponent(row.PRCode)}"
            title="Register Quotation" data-bs-toggle="tooltip">
            <i class="bi bi-file-earmark-plus-fill fs-5"></i>
        </a>`;
                        }

                        let viewBtn = `<a href="javascript:void(0)"
        class="btn btn-sm btn-view btn-icon-square btn-view-quotation"
        data-rfq="${row.RFQCode}" data-pr="${row.PRCode}" data-unreg="${row.HasUnregisteredVendors}"
        data-bs-toggle="tooltip" title="View Quotation">
        <i class="bi bi-eye-fill"></i>
    </a>`;

                        return `<div class="d-flex justify-content-center align-items-center">${viewBtn}${registerBtn}</div>`;
                    }
                }
            ]
        });

        rfqTable.on('draw', function () { $('[data-bs-toggle="tooltip"]').tooltip(); });

        $(document).on("change", "#selectAll", function () { $(".row-select").prop("checked", this.checked); });

        // View Quotation in Modal
        $(document).on("click", ".btn-view-quotation", function () {
            let rfqCode = $(this).data("rfq");
            let prCode = $(this).data("pr");
            $("#rfqModalContent").html("<div class='text-center p-3 small'>Loading...</div>");
            $.get("/Purchase/ViewQuotationVNK", { rfqCode, prCode }, function (html) {
                $("#rfqModalContent").html(html);
                $("#rfqModal").modal("show");
            });
        });
    });

    // Keep blur and modal-open when closing nested modals
    $(document).on('hidden.bs.modal', '.modal', function () {
        if ($('.modal.show').length) {
            $('body').addClass('modal-open');
        }
    });

    // Dynamic stacking for multiple modals
    $('.modal').on('show.bs.modal', function (e) {
        var zIndex = 1050 + ($('.modal:visible').length * 10);
        $(this).css('z-index', zIndex);
        setTimeout(function () {
            $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
        }, 0);
    });

</script>
