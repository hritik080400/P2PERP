@model IEnumerable<P2PLibray.Purchase.Purchase>

<div class="container mt-5">
    <!-- ✅ Date Range Picker -->
    <div class="row mb-3">
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-event"></i>
                </span>
                <input type="text" id="dateRange" class="form-control" placeholder="Select Date Range" />
            </div>
        </div>
    </div>

    <!-- ✅ Chart Section -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card p-3 shadow h-100">
                <h4 class="text-primary fw-bold text-center mb-3">RFQ Vendors Invited vs Responded</h4>
                <div id="rfqBarChart" style="height:350px;"></div>
            </div>
        </div>
    </div>



    <!-- ✅ Toast container -->
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1100">
        <div id="exportToast" class="toast align-items-center text-bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ⚠️ Select at least one row before exporting.
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>




    <!-- ✅ Table Section -->
    <div class="card p-3 shadow">
        <h3 class="mb-3">RFQ List</h3>
        <div class="table-responsive">
            <table id="purchaseTable" class="table table-striped table-bordered nowrap w-100">
                <thead class="table-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAll" /></th> <!-- checkbox first -->
                        <th>Sr.</th> <!-- serial number second -->
                        <th>RFQ Code</th>
                        <th>Status</th>
                        <th>Added By</th>
                        <th>Added Date</th>
                        <th>Vendors Invited</th>
                        <th>Vendors Responded</th>
                        <th>Response Rate (%)</th>
                        <th>Generated PO</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td><input type="checkbox" class="rowCheckbox" value="@item.RFQCode" /></td>
                            <td></td> <!-- serial filled by JS -->
                            <td>@item.RFQCode</td>
                            <td>@item.StatusName</td>
                            <td>@item.AddedBy</td>
                            <td>@(DateTime.TryParse(item.AddedDate.ToString(), out var d) ? d.ToString("dd-MM-yyyy") : "-")</td>
                            <td>@item.VendorsInvited</td>
                            <td>@item.VendorsResponded</td>
                            <td>@item.ResponseRatePercent</td>
                            <td>@item.FinalOutcomePOCode</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    /* ensure table borders show in UI */
    #purchaseTable th, #purchaseTable td {
        text-align: center;
        vertical-align: middle;
        border: 1px solid #dee2e6 !important;
    }

    /* keep the buttons/search area visible when horizontally scrolling */
    .dataTables_wrapper .dt-buttons,
    .dataTables_wrapper .dataTables_filter {
        position: sticky;
        top: 0;
        z-index: 6;
        background: #fff;
        padding-top: .5rem;
        padding-bottom: .5rem;
    }
</style>

<script>
    var table, rfqChart;
    var startDate = null, endDate = null;

    $(document).ready(function () {
        table = $('#purchaseTable').DataTable({

            scrollX: false,
            autoWidth: false,
            dom:
                "<'row mb-2'<'col-6'B><'col-6 text-end'f>>" +
                "<'row'<'col-12'tr>>" +
                "<'row mt-2'<'col-5'i><'col-7 text-end'p>>",
            columnDefs: [
                { targets: 0, orderable: false, searchable: false }, // checkbox
                { targets: 1, orderable: false, searchable: false }  // serial number
            ],
            buttons: [
                {
                    extend: 'print',
                    title: 'RFQ List',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            // export only checked rows
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) return '';           // skip checkbox
                                if (column === 1) return row + 1;      // inject serial number
                                return data;
                            }
                        }
                    },
                //    // 👇 action is OUTSIDE exportOptions
                //    action: function (e, dt, button, config) {
                //        if ($('.rowCheckbox:checked').length === 0) {
                //            showExportToast();
                //            return;
                //        }
                //        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    //    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast(); // 🔔 will now work
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                },
                {
                    extend: 'pdfHtml5',
                    title: 'RFQ List',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                // column 0 is checkbox, 1 is Sr.
                                if (column === 0) return '';               // skip checkbox
                                if (column === 1) return row + 1;          // put serial number
                                return data;
                            }
                        }
                    },
                    // 👇 ADD THIS
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return; // cancel export
                    //    }
                    //    // run default pdf export
                    //    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    //},
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast(); // 🔔 will now work
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        doc.content[0].alignment = 'center';
                        doc.content[0].fontSize = 14;
                        var exportDate = new Date().toLocaleDateString('en-GB');
                        doc.content.splice(1, 0, {
                            text: 'Export Date: ' + exportDate,
                            alignment: 'center',
                            margin: [0, 0, 0, 8],
                            fontSize: 10
                        });
                        doc.styles.tableHeader.alignment = 'center';
                        doc.styles.tableHeader.fillColor = '#212529';
                        doc.styles.tableHeader.color = '#ffffff';
                        doc.styles.tableHeader.bold = true;
                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return 0.5; };
                        objLayout['vLineWidth'] = function (i) { return 0.5; };
                        objLayout['hLineColor'] = function (i) { return '#aaa'; };
                        objLayout['vLineColor'] = function (i) { return '#aaa'; };
                        objLayout['paddingLeft'] = function (i) { return 4; };
                        objLayout['paddingRight'] = function (i) { return 4; };
                        doc.content[doc.content.length - 1].layout = objLayout;
                    }
                },
                {
                    extend: 'excelHtml5',
                    title: 'RFQ_List',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) return '';
                                if (column === 1) return row + 1;
                                return data;
                            }
                        }
                    },
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return;
                    //    }
                    //    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    //},
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast(); // 🔔 will now work
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    },
                },
                {
                    extend: 'csvHtml5',
                    title: 'RFQ_List',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                       
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) return '';
                                if (column === 1) return row + 1;
                                return data;
                            }
                        }
                    },
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return;
                    //    }
                    //    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    //},
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast(); // 🔔 will now work
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    },
                },
                'colvis'
            ]

        });

        // ✅ Serial numbers in sequence
        table.on('draw.dt', function () {
            var pageInfo = table.page.info();
            table.column(1, { page: 'current' }).nodes().each(function (cell, i) {
                cell.innerHTML = pageInfo.start + i + 1;
            });
        }).draw();

        // ✅ Date filter
        $.fn.dataTable.ext.search.push(function (settings, data) {
            var dateStr = data[5];
            if (!dateStr || dateStr === "-") return true;
            var parts = dateStr.split("-");
            var d = new Date(parts[2], parts[1] - 1, parts[0]);
            if (startDate && d < startDate) return false;
            if (endDate && d > endDate) return false;
            return true;
        });

        // ✅ Checkbox logic
        $(document).on('change', '#selectAll', function () {
            var checked = this.checked;
            $('.rowCheckbox').prop('checked', checked);
        });

        $(document).on('change', '.rowCheckbox', function () {
            var total = $('.rowCheckbox').length;
            var checkedCount = $('.rowCheckbox:checked').length;
            if (checkedCount === total) {
                $('#selectAll').prop('checked', true).prop('indeterminate', false);
            } else if (checkedCount === 0) {
                $('#selectAll').prop('checked', false).prop('indeterminate', false);
            } else {
                // remove minus sign completely
                $('#selectAll').prop('checked', false).prop('indeterminate', false);
            }
        });

        // ✅ Date range picker
        $('#dateRange').daterangepicker({
            autoUpdateInput: false,
            alwaysShowCalendars: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD-MM-YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end) {
            startDate = start.toDate();
            endDate = end.toDate();
            $('#dateRange').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));
            table.draw();
            updateChart();
        });

        $('#dateRange').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range');
            startDate = null; endDate = null;
            table.draw();
            updateChart();
        });

        $('#dateRange').val('Select Date Range');

        // ✅ Build/Update Highcharts bar chart (same as your existing updateChart function)
        function buildChart(rfqCodes, invitedData, respondedData, totalRFQs) {
            rfqChart = Highcharts.chart('rfqBarChart', {
                chart: { type: 'column' },
                title: { text: 'Vendors Invited vs Vendors Responded per RFQ' },
                subtitle: {
                    text: '<span style="font-size:32px; font-weight:bold;">Total RFQs: ' + totalRFQs + '</span>',
                    align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true
                },
                xAxis: { categories: rfqCodes, crosshair: true },
                yAxis: { min: 0, title: { text: 'Count' } },
                tooltip: { shared: true },
                plotOptions: { column: { grouping: true, shadow: false, borderWidth: 0 } },
                series: [
                    { name: 'Vendors Invited', data: invitedData, color: '#007bff' },
                    { name: 'Vendors Responded', data: respondedData, color: '#28a745' }
                ]
            });
        }

        function updateChart() {
            var rfqData = [];
            table.rows({ filter: 'applied' }).every(function () {
                var d = this.data();
                var addedDateStr = d[5];
                var parts = addedDateStr.split("-");
                var addedDate = new Date(parts[2], parts[1] - 1, parts[0]);
                var responded = parseInt(d[7]) || 0;
                if (responded > 0) {
                    rfqData.push({
                        rfqCode: d[2],
                        invited: parseInt(d[6]) || 0,
                        responded: responded,
                        date: addedDate
                    });
                }
            });

            rfqData.sort((a, b) => b.date - a.date);
            var chartData = rfqData.slice(0, 15);

            var rfqCodes = chartData.map(x => x.rfqCode);
            var invitedData = chartData.map(x => x.invited);
            var respondedData = chartData.map(x => x.responded);
            var totalRFQs = table.rows({ filter: 'applied' }).count();

            if (rfqChart) {
                rfqChart.xAxis[0].setCategories(rfqCodes, false);
                rfqChart.series[0].setData(invitedData, false);
                rfqChart.series[1].setData(respondedData, false);
                rfqChart.setSubtitle({
                    text: '<span style="font-size:32px; font-weight:bold;">Total RFQs: ' + totalRFQs + '</span>',
                    align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true
                });
                rfqChart.redraw();
            } else {
                buildChart(rfqCodes, invitedData, respondedData, totalRFQs);
            }
        }

        updateChart();
        table.on('draw', function () { updateChart(); });


        // ✅ Utility: show warning toast
        function showExportToast() {
            var toastEl = document.getElementById('exportToast');
            var toast = new bootstrap.Toast(toastEl);
            toast.show();
        }


        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000" // 3 seconds
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }





    });
</script>
