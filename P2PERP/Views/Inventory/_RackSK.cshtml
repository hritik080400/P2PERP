<div class="d-flex justify-content-between mb-3 align-items-center">
    <h4 class="mb-0">Rack List</h4>
    <button class="btn btn-success" id="btnAddrack">
        <i class="bi bi-plus-circle"></i> Add Rack
    </button>
</div>

<!-- Responsive wrapper -->
<div class="table-responsive">
    <table id="rackTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="selectAllRack"></th>
                <th>Sr No</th>
                <th>Rack ID</th>
                <th>Rack Code</th>
                <th>Rack Name</th>
                <th>Section Name</th>
                <th>Warehouse Name</th>
                <th>Added Date</th>
                <th>Added By</th>

                <th>Description</th>

                <th>Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>





<!-- Add Rack Modal -->
<div class="modal fade" id="rackModal" tabindex="-1" aria-labelledby="rackModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="rackForm">
                <div class="modal-header justify-content-center bg-primary">
                    <h5 class="modal-title text-white text-center" id="rackModalLabel">Add Rack</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body row g-3">
                    <input type="hidden" id="RackId" name="RackId" />

                    <div class="col-md-6">
                        <label class="form-label">Rack Code</label>
                        <input type="text" class="form-control" id="RackCode" name="RackCode" required readonly />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Rack Name</label>
                        <input type="text" class="form-control" id="RackName" name="RackName" required />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Warehouse</label>
                        <select class="form-select" id="WarehouseId" name="WarehouseId" required>
                            <option value="">-- Select Warehouse --</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Section</label>
                        <select class="form-select" id="SectionId" name="SectionId" required>
                            <option value="">-- Select Section --</option>
                        </select>
                    </div>

                    <div class="col-md-12">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="Description" name="Description"></textarea>
                    </div>
                </div>
                <div class="text-end">

                    <div class="d-flex justify-content-end gap-2 mt-4 m-4">
                        <button type="button" class="btn btn-outline-danger px-4" data-bs-dismiss="modal"><i class="bi bi-x-circle me-2"></i>Close</button>
                        <button type="submit" class="btn btn-success px-4"><i class="bi bi-check-circle me-2 text-white"></i>Save</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Rack Modal -->
<div class="modal fade" id="viewRackModal" tabindex="-1" aria-labelledby="viewRackModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white" id="viewRackModalLabel">Rack Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    <dt class="col-sm-4">Rack Code</dt>
                    <dd class="col-sm-8" id="viewRackCode"></dd>

                    <dt class="col-sm-4">Rack Name</dt>
                    <dd class="col-sm-8" id="viewRackName"></dd>

                    <dt class="col-sm-4">Warehouse</dt>
                    <dd class="col-sm-8" id="viewWarehouseName"></dd>

                    <dt class="col-sm-4">Section</dt>
                    <dd class="col-sm-8" id="viewSectionName"></dd>

                    <dt class="col-sm-4">Description</dt>
                    <dd class="col-sm-8" id="viewDescription"></dd>

                    <dt class="col-sm-4">Added By</dt>
                    <dd class="col-sm-8" id="viewAddedBy"></dd>

                    <dt class="col-sm-4">Added Date</dt>
                    <dd class="col-sm-8" id="viewAddedDate"></dd>
                </dl>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {

        // Keep track of selected Rack IDs
        let selectedRackIds = new Set();

        var table = $('#rackTable').DataTable({
            "ajax": {
                "url": "/Inventory/GetRacksSK",
                "type": "GET",
                "dataSrc": "data"
            },
            "columns": [
                {
                    "data": "RackId",
                    "render": function (data) {
                        return '<input type="checkbox" class="rack-checkbox" value="' + data + '">';
                    },
                    "orderable": false,
                    "searchable": false
                },
                {
                    "data": null, // ✅ Sr No column
                    "render": function (data, type, row, meta) {
                        return meta.row + 1; // ✅ Row index + 1
                    },
                    "orderable": false
                },
                { "data": "RackId", visible: false },
                { "data": "RackCode" },
                { "data": "RackName" },
                { "data": "SectionName" },
                { "data": "WarehouseName" },
                {
                    "data": "AddedDate",
                    "render": function (data) {
                        if (!data) return "";
                        var match = /\/Date\((\d+)\)\//.exec(data);
                        if (match) {
                            var d = new Date(parseInt(match[1]));
                            return d.toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" });
                        }
                        var d2 = new Date(data);
                        return !isNaN(d2.getTime()) ?
                            d2.toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit", year: "numeric" })
                            : "";
                    }
                },
                { "data": "AddedBy" },
                { "data": "Description" },
                {
                    "data": "RackId",
                    "render": function (data) {
                        return `
                        <div class="d-flex justify-content-center gap-1">
                         <button class="btn btn-sm btn-info view-rack" data-id="${data}">
     <i class="bi bi-eye"></i>
 </button>
                        <button class="btn btn-sm btn-warning edit-rack" data-id="${data}">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                       
                        <button class="btn btn-sm btn-danger delete-rack" data-id="${data}">
                            <i class="bi bi-trash"></i>
                        </button>
                        </div>
                        `;
                    },
                    "orderable": false,
                    "searchable": false
                }
            ],
            dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
            buttons: [
                // Print
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: 'Rack List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data) {
                            return selectedRackIds.has(data.RackId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRackIds.size === 0) {
                            toastr.warning("Please select at least one rack before printing.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    customize: function (win) {
                        $(win.document.body).find('table')
                            .css('border', '1px solid black')
                            .css('border-collapse', 'collapse')
                            .find('th, td')
                            .css('border', '1px solid black')
                            .css('padding', '5px');

                        $(win.document.body).find('th')
                            .css('background-color', 'black')
                            .css('color', 'white');
                    }
                },
                // PDF
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: 'Rack List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data) {
                            return selectedRackIds.has(data.RackId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRackIds.size === 0) {
                            toastr.warning("Please select at least one rack before exporting PDF.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        doc.styles.tableHeader.fillColor = 'black';
                        doc.styles.tableHeader.color = 'white';
                        doc.styles.tableHeader.alignment = 'center';
                        doc.styles.tableHeader.bold = true;

                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return 0.5; };
                        objLayout['vLineWidth'] = function (i) { return 0.5; };
                        objLayout['hLineColor'] = function (i) { return '#000000'; };
                        objLayout['vLineColor'] = function (i) { return '#000000'; };
                        objLayout['paddingLeft'] = function (i) { return 5; };
                        objLayout['paddingRight'] = function (i) { return 5; };
                        doc.content[1].layout = objLayout;
                    }
                },
                // Excel
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: 'Rack List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data) {
                            return selectedRackIds.has(data.RackId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRackIds.size === 0) {
                            toastr.warning("Please select at least one rack before exporting Excel.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },
                // CSV
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    title: 'Rack List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data) {
                            return selectedRackIds.has(data.RackId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRackIds.size === 0) {
                            toastr.warning("Please select at least one rack before exporting CSV.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ]
        });

        // ✅ Select/Unselect checkboxes
        // Select / Unselect individual checkbox
        $('#rackTable').on('change', '.rack-checkbox', function () {
            const id = $(this).val();
            if ($(this).is(':checked')) {
                selectedRackIds.add(id);
            } else {
                selectedRackIds.delete(id);
            }

            // Update "Select All" checkbox status
            const totalCheckboxes = $('.rack-checkbox').length;
            const checkedCheckboxes = $('.rack-checkbox:checked').length;
            $('#selectAllRack').prop('checked', totalCheckboxes > 0 && totalCheckboxes === checkedCheckboxes);
        });

        // Select / Unselect all
        $('#selectAllRack').on('change', function () {
            const isChecked = $(this).is(':checked');
            $('.rack-checkbox').prop('checked', isChecked).trigger('change');
        });


        $(document).ready(function () {

            // --- Add date range picker above Rack table ---
            $("#rackTable_wrapper").prepend(`
        <div class="input-group mb-2 mt-3" style="max-width: 280px;">
            <span class="input-group-text bg-primary text-white">
                <i class="bi bi-calendar-date"></i>
            </span>
            <input type="text" id="rackDateRange" class="form-control" placeholder="Select date range" readonly />
        </div>
    `);

            // Initialize date range picker with predefined ranges
            $('#rackDateRange').daterangepicker({
                autoUpdateInput: false,
                locale: { cancelLabel: 'Clear' },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            });

            // --- Custom filter function for DataTable ---
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                if (settings.nTable.id !== "rackTable") return true;

                var dateRange = $('#rackDateRange').val();
                if (!dateRange) return true;

                var minMax = dateRange.split(' to ');
                var min = moment(minMax[0], 'YYYY-MM-DD');
                var max = moment(minMax[1], 'YYYY-MM-DD');

                // Added Date column index = 6 (0-based)
                var date = moment(data[6], 'DD/MM/YYYY');
                return date.isBetween(min, max, 'day', '[]');
            });

            // Apply filter on selection
            $('#rackDateRange').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
                $('#rackTable').DataTable().draw();
            });

            // Clear filter
            $('#rackDateRange').on('cancel.daterangepicker', function () {
                $(this).val('');
                $('#rackTable').DataTable().draw();
            });

        });


        // ✅ Add Rack
        $('#btnAddrack').on('click', function () {
            $('#rackForm')[0].reset();
            $('#RackId').val('');
            $('#rackModalLabel').text('Add Rack');
            $('#rackModal').modal('show');

            loadWarehouses();

            // ✅ Get Next Rack Code
            $.get("/Inventory/GetNextRackCodeSK", function (res) {
                if (res && res.NextCode) {
                    $('#RackCode').val(res.NextCode);
                }
            });
        });

        // ✅ Save (Add/Edit)
        $('#rackForm').on('submit', function (e) {
            e.preventDefault();

            var formData = {
                RackId: $('#RackId').val(),
                RackCode: $('#RackCode').val(),
                RackName: $('#RackName').val(),
                SectionCode: $('#SectionId').val(),
                WarehouseCode: $('#WarehouseId').val(),
                Description: $('#Description').val()
            };

            $.ajax({
                url: "/Inventory/SaveRackSK",
                type: "POST",
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $('#rackModal').modal('hide');
                        $('#rackTable').DataTable().ajax.reload();
                        Swal.fire("Success", "Rack saved successfully!", "success");
                    } else {
                        Swal.fire("Error", res.message || "Something went wrong", "error");
                    }
                },
                error: function () {
                    Swal.fire("Error", "Server error while saving rack.", "error");
                }
            });
        });

        // ✅ Edit Rack
        $('#rackTable').on('click', '.edit-rack', function () {
            var rackId = $(this).data("id");
            $.get("/Inventory/GetRackByIdSKK/" + rackId, function (res) {
                if (res) {
                    $('#RackId').val(res.RackId);
                    $('#RackCode').val(res.RackCode);
                    $('#RackName').val(res.RackName);
                    $('#Description').val(res.Description);

                    $('#rackModalLabel').text('Edit Rack');
                    loadWarehouses(res.WarehouseCode);

                    setTimeout(function () {
                        $.get("/Inventory/GetSectionsSKK", { warehouseCode: res.WarehouseCode }, function (data) {
                            var ddl = $("#SectionId");
                            ddl.empty().append('<option value="">-- Select Section --</option>');
                            $.each(data, function (i, item) {
                                ddl.append(`<option value="${item.SectionCode}">${item.SectionName}</option>`);
                            });
                            ddl.val(res.SectionCode);
                        });
                    }, 300);

                    $('#rackModal').modal('show');
                } else {
                    Swal.fire("Error", "Rack not found!", "error");
                }
            }).fail(function () {
                Swal.fire("Error", "Error loading rack details.", "error");
            });
        });

        // ✅ Delete Rack
        $('#rackTable').on('click', '.delete-rack', function () {
            var rackId = $(this).data("id");

            Swal.fire({
                title: "Are you sure?",
                text: "You won’t be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true,
                customClass: {
                    confirmButton: "btn btn-success me-2",
                    cancelButton: "btn btn-danger"
                },
                buttonsStyling: false
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post("/Inventory/DeleteRackSK/" + rackId, function (res) {
                        if (res.success) {
                            table.ajax.reload();
                            Swal.fire("Deleted!", "Rack has been deleted.", "success");
                        } else {
                            Swal.fire("Error", res.message || "Error deleting rack!", "error");
                        }
                    }).fail(function () {
                        Swal.fire("Error", "Server error while deleting.", "error");
                    });
                }
            });
        });

        // ✅ View Rack
        $('#rackTable').on('click', '.view-rack', function () {
            var rackId = $(this).data("id");
            $.get("/Inventory/GetRackByIdSKK/" + rackId, function (res) {
                if (res) {
                    $('#viewRackCode').text(res.RackCode);
                    $('#viewRackName').text(res.RackName);
                    $('#viewWarehouseName').text(res.WarehouseName);
                    $('#viewSectionName').text(res.SectionName);
                    $('#viewDescription').text(res.Description);
                    $('#viewAddedBy').text(res.AddedBy);

                    // ✅ Date parse yahi karo
                    let formattedDate = "";
                    if (res.AddedDate) {
                        // अगर backend ने /Date(1726204800000)/ भेजा
                        var match = /\/Date\((\d+)\)\//.exec(res.AddedDate);
                        if (match) {
                            var d = new Date(parseInt(match[1]));
                            formattedDate = d.toLocaleDateString("en-GB", {
                                day: "2-digit", month: "2-digit", year: "numeric"
                            });
                        } else {
                            // ISO format (2025-09-13T00:00:00) या normal date
                            var d2 = new Date(res.AddedDate);
                            if (!isNaN(d2.getTime())) {
                                formattedDate = d2.toLocaleDateString("en-GB", {
                                    day: "2-digit", month: "2-digit", year: "numeric"
                                });
                            }
                        }
                    }
                    $('#viewAddedDate').text(formattedDate);

                    $('#viewRackModal').modal('show');
                } else {
                    Swal.fire("Error", "Rack details not found.", "error");
                }
            }).fail(function () {
                Swal.fire("Error", "Server error while loading rack details.", "error");
            });
        });


        // ✅ Load Warehouses
        function loadWarehouses(selectedCode = "") {
            $.get("/Inventory/GetWarehousesListSK", function (data) {
                var ddl = $("#WarehouseId");
                ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                $.each(data, function (i, item) {
                    ddl.append(`<option value="${item.WarehouseCode}">${item.WarehouseName}</option>`);
                });
                if (selectedCode) ddl.val(selectedCode).trigger('change');
            }).fail(function () {
                Swal.fire("Error", "Error loading warehouses.", "error");
            });
        }

        // ✅ Load Sections on warehouse change
        $('#WarehouseId').on('change', function () {
            var warehouseCode = $(this).val();
            var ddl = $("#SectionId");
            ddl.empty().append('<option value="">-- Select Section --</option>');
            if (warehouseCode) {
                $.get("/Inventory/GetSectionsSKK", { warehouseCode: warehouseCode }, function (data) {
                    $.each(data, function (i, item) {
                        ddl.append(`<option value="${item.SectionCode}">${item.SectionName}</option>`);
                    });
                }).fail(function () {
                    Swal.fire("Error", "Error loading sections.", "error");
                });
            }
        });

    });

    // ✅ Select All toggle
    $('#selectAllRack').on('click', function () {
        var isChecked = $(this).prop('checked');
        $('.rack-checkbox').prop('checked', isChecked);
    });

    // ✅ Uncheck Select All if one unchecked
    $('#rackTable').on('change', '.rack-checkbox', function () {
        if (!$(this).prop('checked')) {
            $('#selectAllRack').prop('checked', false);
        }
    });

</script>

