<div class="d-flex justify-content-between mb-3 align-items-center">
    <h4 class="mb-0">Row List</h4>
    <button class="btn btn-success" id="btnAddrow">
        <i class="bi bi-plus-circle"></i> Add Row
    </button>
</div>

<!-- Responsive wrapper -->
<div class="table-responsive">
    <table id="rowTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="selectAll"></th>
                <th>Sr.No.</th>
                <th>Row ID</th>
                <th>Row Code</th>
                <th>Row Name</th>
                <th>Rack Name</th>
                <th>Section Name</th>
                <th>Warehouse Name</th>
                <th>Added Date</th>
                <th>Added By</th>

                <th>Description</th>

                <th>Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>

<!-- Add Row Modal -->
<div class="modal fade" id="rowModal" tabindex="-1" aria-labelledby="rowModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary justify-content-center">
                <h5 class="modal-title  text-center w-100 text-white" id="rowModalLabel">Add New Row</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="rowForm">

                    <input type="hidden" id="RowId" name="RowId" />
                    <div class="col-md-6">
                        <label class="form-label">Row Code</label>
                        <input type="text" class="form-control" id="RowCode" name="RowCode" required readonly />
                    </div>
                    <div class="mb-3">
                        <label for="warehouseDropdown" class="form-label">Warehouse</label>
                        <select id="warehouseDropdown" class="form-select">
                            <option value="">-- Select Warehouse --</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="sectionDropdown" class="form-label">Section</label>
                        <select id="sectionDropdown" class="form-select">
                            <option value="">-- Select Section --</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="rackDropdown" class="form-label">Rack</label>
                        <select id="rackDropdown" class="form-select">
                            <option value="">-- Select Rack --</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="rowName" class="form-label">Row Name</label>
                        <input type="text" id="rowName" class="form-control" placeholder="Enter Row Name">
                    </div>

                    <div class="col-md-12">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="Descriptions" name="Description"></textarea>
                    </div>

                    <div class="d-flex justify-content-end gap-2 mt-4 m-4">
                        <button type="button" class="btn btn-outline-danger px-4" data-bs-dismiss="modal"><i class="bi bi-x-circle me-2"></i>Close</button>
                        <button type="submit" id="saveRow" class="btn btn-success px-4"><i class="bi bi-check-circle me-2 text-white"></i>Save</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>


<!-- View Row Modal -->
<div class="modal fade" id="viewRowModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">

            <!-- Header -->
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="d-flex justify-content-center text-center ms-auto text-white">
                    Row Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>

            <!-- Body -->
            <div class="modal-body">
                <form class="row g-3">

                    <!-- Row Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRowCode" readonly>
                                <label for="vRowCode">Row Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Row Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-list-check-2"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRowName" readonly>
                                <label for="vRowName">Row Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vWarehouseName" readonly>
                                <label for="vWarehouseName">Warehouse Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Section Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vSectionName" readonly>
                                <label for="vSectionName">Section Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Rack Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-drawer-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRackName" readonly>
                                <label for="vRackName">Rack Name</label>
                            </div>
                        </div>
                    </div>

                  

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="vDescription" rows="2" readonly></textarea>
                                <label for="vDescription">Description</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added Date -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vAddedDate" readonly>
                                <label for="vAddedDate">Added Date</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added By -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-user-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vAddedBy" readonly>
                                <label for="vAddedBy">Added By</label>
                            </div>
                        </div>
                    </div>

                </form>
            </div>

           
        </div>
    </div>
</div>



<script>
    let selectedRowIds = new Set();

    $(document).ready(function () {
        // ✅ Initialize DataTable
        $('#rowTable').DataTable({
            processing: true,
            serverSide: false,
            ajax: {
                url: "/Inventory/RowsSKK",
                type: 'GET',
                dataSrc: 'data'
            },
            dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
            buttons: [

                // --- Print ---
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: 'Row List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId.toString());
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before printing.", "No Selection");
                            return;
                        }
                       
                        var newConfig = $.extend({}, config, {
                            exportOptions: {
                                columns: config.exportOptions.columns,
                                modifier: {
                                    selected: null 
                                },
                                rows: function (idx, data, node) {
                                    return selectedRowIds.has(data.RowId.toString());
                                }
                            }
                        });
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, newConfig);
                    },
                    customize: function (win) {
                        $(win.document.body).find('table')
                            .css('border', '1px solid black')
                            .css('border-collapse', 'collapse')
                            .find('th, td')
                            .css('border', '1px solid black')
                            .css('padding', '5px');

                        $(win.document.body).find('th')
                            .css('background-color', 'black')
                            .css('color', 'white');
                    }
                },


                // --- PDF ---
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: 'Row List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId);
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before exporting PDF.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        doc.styles.tableHeader.fillColor = 'black';
                        doc.styles.tableHeader.color = 'white';
                        doc.styles.tableHeader.alignment = 'center';
                        doc.styles.tableHeader.bold = true;

                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return 0.5; };
                        objLayout['vLineWidth'] = function (i) { return 0.5; };
                        objLayout['hLineColor'] = function (i) { return '#000000'; };
                        objLayout['vLineColor'] = function (i) { return '#000000'; };
                        objLayout['paddingLeft'] = function (i) { return 5; };
                        objLayout['paddingRight'] = function (i) { return 5; };
                        doc.content[1].layout = objLayout;
                    }
                },

                // --- Excel ---
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: 'Row List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId);
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before exporting Excel.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },

                // --- CSV ---
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    title: 'Row List',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedRowIds.has(data.RowId);
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedRowIds.size === 0) {
                            toastr.warning("Please select at least one row before exporting CSV.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ],
            columns: [
                {
                    data: null,
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="rowCheckbox" value="${row.RowId}" />`;
                    },
                    orderable: false
                },
                {
                    "data": null, 
                    "render": function (data, type, row, meta) {
                        return meta.row + 1; 
                    },
                    "orderable": false
                },
                { data: "RowId", visible: false },
                { data: "RowCode" },
                { data: "RowName" },
                { data: "RackName" },
                { data: "SectionName" },
                { data: "WarehouseName" },
                {
                    "data": "AddedDate",
                    "render": function (data) {
                        if (!data) return "";

                        // .NET JSON format: /Date(1736985600000)/
                        var match = /Date\((\d+)\)/.exec(data);
                        if (match) {
                            var dt = new Date(parseInt(match[1], 10));
                            return dt.toLocaleDateString("en-GB"); 
                        }

                        // Agar normal ISO string hai to
                        var dt2 = new Date(data);
                        if (!isNaN(dt2.getTime())) {
                            return dt2.toLocaleDateString("en-GB");
                        }

                        return data; 
                    }

                },
                { data: "AddedBy" },
                { data: "Description" },
                {
                    data: null,
                    render: function (data, type, row) {
                        return `
                        <div class="d-flex justify-content-center gap-1">
                          <button class="btn btn-sm btn-info viewRow" data-id="${row.RowId}" title="View">
            <i class="bi bi-eye"></i>
        </button>
        <button class="btn btn-sm btn-warning editRow" data-id="${row.RowId}" title="Edit">
            <i class="bi bi-pencil-square"></i>
        </button>
        <button class="btn btn-sm btn-danger deleteRow" data-id="${row.RowId}" title="Delete">
            <i class="bi bi-trash"></i>
        </button>
                        </div>
                        `;
                    },
                    orderable: false
                }
            ]
        });

        $("#rowTable_wrapper").prepend(`
  <div class="input-group mb-2 mt-3" style="max-width: 280px;">
    <span class="input-group-text bg-primary text-white">
      <i class="bi bi-calendar-date"></i>
    </span>
    <input type="text" id="rowDateRange" class="form-control" placeholder="Select date range" readonly />
  </div>
`);

        // ✅ Date Range Picker Initialization
        $('#rowDateRange').daterangepicker({
            autoUpdateInput: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'YYYY-MM-DD'
            },
            opens: 'left',
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        });

        // ✅ Apply Filter on DataTable
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            if (settings.nTable.id !== "rowTable") return true;

            var dateRange = $('#rowDateRange').val();
            if (!dateRange) return true;

            var minMax = dateRange.split(' to ');
            var min = moment(minMax[0], 'YYYY-MM-DD');
            var max = moment(minMax[1], 'YYYY-MM-DD');

           
            var date = moment(data[8], 'DD/MM/YYYY');
            if (!date.isValid()) return true;

            return date.isBetween(min, max, 'day', '[]');
        });

        // ✅ On Apply / Cancel
        $('#rowDateRange').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
            $('#rowTable').DataTable().draw();
        });

        $('#rowDateRange').on('cancel.daterangepicker', function (ev, picker) {
            $(this).val('');
            $('#rowTable').DataTable().draw();
        });



        // ✅ Show modal on button click
        $(document).on("click", "#btnAddrow", function () {
            $("#rowModal").modal("show");
            loadWarehouses();
            // ✅ Get Next Row Code


            $.get("/Inventory/GetNextRowCodeSKK", function (res) {
                if (res && res.RnextCode) {  
                    $('#RowCode').val(res.RnextCode);
                } else {
                    Swal.fire("Error", "Next row code not found", "error");
                }
            });


            $("#sectionDropdown").empty().append('<option value="">-- Select Section --</option>');
            $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
        });



        // ✅ Save (Add/Edit)
        $('#rowForm').on('submit', function (e) {
            e.preventDefault();

            var formData = {
                RowId: $('#RowId').val() || 0,
                RowCode: $('#RowCode').val(),
                RowName: $('#rowName').val(),
                WarehouseCode: $('#warehouseDropdown').val(),
                SectionCode: $('#sectionDropdown').val(),
                RackCode: $('#rackDropdown').val(),
                Description: $('#Descriptions').val() || ""
            };

            $.ajax({
                url: "/Inventory/SaveRowSBK",
                type: "POST",
                data: formData,
                success: function (res) {
                    if (res.success) {
                        $('#rowModal').modal('hide');
                        $('#rowTable').DataTable().ajax.reload();

                        Swal.fire({
                            title: "Success",
                            text: "Row saved successfully!",
                            icon: "success",
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: res.message || "Something went wrong",
                            icon: "error",
                            timer: 2500,
                            showConfirmButton: false
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error",
                        text: "Server error while saving row.",
                        icon: "error",
                        timer: 2500,
                        showConfirmButton: false
                    });
                }
            });
        });
        // ✅ View Row
        $(document).on("click", ".viewRow", function () {
            var rowId = $(this).data("id");

            $.ajax({
                url: "/Inventory/GetRowByIdSSK",
                type: "GET",
                data: { rowId: rowId },
                success: function (res) {
                    if (res) {
                        // Fill modal with data - .val() for input fields
                        $("#vRowId").val(res.RowId);
                        $("#vRowCode").val(res.RowCode);
                        $("#vRowName").val(res.RowName);
                        $("#vRackName").val(res.RackName);
                        $("#vSectionName").val(res.SectionName);
                        $("#vWarehouseName").val(res.WarehouseName);
                        $("#vDescription").val(res.Description || "-");
                        $("#vAddedBy").val(res.AddedBy);

                        // Date parsing
                        let rowDate = res.AddedDate; 
                        let timestamp = parseInt(rowDate.replace(/[^0-9]/g, ''));
                        let date = new Date(timestamp);
                        let formattedDate = date.toLocaleDateString("en-GB", {
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric"
                        });
                        $("#vAddedDate").val(formattedDate);

                        // Show modal
                        $("#viewRowModal").modal("show");
                    } else {
                        Swal.fire("Error", "Row details not found", "error");
                    }
                },
                error: function () {
                    Swal.fire("Error", "Server error while fetching row details", "error");
                }
            });
        });


        // ✅ Edit Row
        $(document).on("click", ".editRow", function () {
            var rowId = $(this).data("id");

            // Get row data from server
            $.ajax({
                url: "/Inventory/GetRowByIdSSK",
                type: "GET",
                data: { rowId: rowId },
                success: function (res) {
                    if (res) {
                        // Open modal
                        $("#rowModal").modal("show");

                       
                        $("#RowId").val(res.RowId);
                        $("#RowCode").val(res.RowCode);
                        $("#rowName").val(res.RowName);
                        $("#Descriptions").val(res.Description);

                       
                        loadWarehousess(res.WarehouseCode, res.SectionCode, res.RackCode);
                    } else {
                        Swal.fire("Error", "Row data not found", "error");
                    }
                },
                error: function () {
                    Swal.fire("Error", "Server error while fetching row", "error");
                }
            });
        });


        function loadWarehousess(selectedWarehouse, selectedSection, selectedRack) {
    $.ajax({
        url: '@Url.Action("GetWarehousesListSK", "Inventory")',
        type: 'GET',
        success: function (data) {
            let $ddl = $("#warehouseDropdown");
            $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
            $.each(data, function (i, item) {
                $ddl.append('<option value="' + item.WarehouseCode + '">' + item.WarehouseName + '</option>');
            });

            if (selectedWarehouse) {
                $ddl.val(selectedWarehouse).trigger('change');

                // Load sections after warehouse is selected
                loadSections(selectedWarehouse, selectedSection, selectedRack);
            }
        }
    });
}
function loadSections(warehouseCode, selectedSection, selectedRack) {
    if (!warehouseCode) return;

    $.ajax({
        url: '@Url.Action("GetSectionsSKK", "Inventory")',
        type: 'GET',
        data: { warehouseCode: warehouseCode },
        success: function (data) {
            let $ddl = $("#sectionDropdown");
            $ddl.empty().append('<option value="">-- Select Section --</option>');
            $.each(data, function (i, item) {
                $ddl.append('<option value="' + item.SectionCode + '">' + item.SectionName + '</option>');
            });

            if (selectedSection) {
                $ddl.val(selectedSection).trigger('change');

                // Load racks after section is selected
                loadRacks(selectedSection, selectedRack);
            }
        }
    });
        }


function loadRacks(sectionCode, selectedRack) {
    if (!sectionCode) return;

    $.ajax({
        url: '@Url.Action("GetRackss", "Inventory")',
        type: 'GET',
        data: { sectionCode: sectionCode },
        success: function (data) {
            let $ddl = $("#rackDropdown");
            $ddl.empty().append('<option value="">-- Select Rack --</option>');
            $.each(data, function (i, item) {
                $ddl.append('<option value="' + item.RackCodes + '">' + item.RackNames + '</option>');
            });

            if (selectedRack) {
                $ddl.val(selectedRack);
            }
        }
    });
}


        // ✅ Load Warehouses
        function loadWarehouses() {
            $.ajax({
                url: '@Url.Action("GetWarehousesListSK", "Inventory")',
                type: 'GET',
                success: function (data) {
                    let $ddl = $("#warehouseDropdown");
                    $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                    $.each(data, function (i, item) {
                        $ddl.append('<option value="' + item.WarehouseCode + '">' + item.WarehouseName + '</option>');
                    });
                }
            });
        }

        // ✅ Load Sections based on Warehouse
        $("#warehouseDropdown").change(function () {
            let warehouseId = $(this).val();
            if (warehouseId) {
                $.ajax({
                    url: '@Url.Action("GetSectionsSKK", "Inventory")', 
                    type: 'GET',
                    data: { warehouseCode: warehouseId },
                    success: function (data) {
                        let $ddl = $("#sectionDropdown");
                        $ddl.empty().append('<option value="">-- Select Section --</option>');
                        $.each(data, function (i, item) {
                            $ddl.append('<option value="' + item.SectionCode + '">' + item.SectionName + '</option>');
                        });
                        $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
                    }
                });
            } else {
                $("#sectionDropdown").empty().append('<option value="">-- Select Section --</option>');
                $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
            }
        });

        // ✅ Load Racks based on Section
        $("#sectionDropdown").change(function () {
            let sectionId = $(this).val();
            if (sectionId) {
                $.ajax({
                    url: '@Url.Action("GetRackss", "Inventory")', 
                    type: 'GET',
                    data: { sectionCode: sectionId },
                    success: function (data) {
                        let $ddl = $("#rackDropdown");
                        $ddl.empty().append('<option value="">-- Select Rack --</option>');
                        $.each(data, function (i, item) {
                            $ddl.append('<option value="' + item.RackCodes + '">' + item.RackNames + '</option>');
                        });
                    }
                });
            } else {
                $("#rackDropdown").empty().append('<option value="">-- Select Rack --</option>');
            }
        });

        // ✅ Select/Deselect All
        // ✅ Select All -> saare rowCheckbox select/deselect
        $(document).on('change', '#selectAll', function () {
            let isChecked = $(this).prop('checked');
            $('#rowTable tbody .rowCheckbox').prop('checked', isChecked).trigger('change');
        });

        // ✅ Row wise checkbox -> selectedRowIds update
        $(document).on('change', '#rowTable tbody .rowCheckbox', function () {
            let rowId = $(this).val();
            if ($(this).prop('checked')) {
                selectedRowIds.add(rowId);
            } else {
                selectedRowIds.delete(rowId);
            }

            // SelectAll ka sync
            let total = $('#rowTable tbody .rowCheckbox').length;
            let checked = $('#rowTable tbody .rowCheckbox:checked').length;
            $('#selectAll').prop('checked', total > 0 && total === checked);
        });

        // ✅ Jab DataTable redraw ho -> SelectAll reset & selectedRowIds clear
        $('#rowTable').on('draw.dt', function () {
            $('#selectAll').prop('checked', false);
            selectedRowIds.clear();
        });


        // DELETE
        $('#rowTable').on('click', '.deleteRow', function () {
            var id = $(this).data("id");

            Swal.fire({
                title: "Are you sure?",
                text: "This Row will be permanently deleted!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/Inventory/DeleteRowSK",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ rowId: id }),
                        success: function (res) {
                            if (res.success) {
                                $('#rowTable').DataTable().ajax.reload();

                                Swal.fire({
                                    title: "Deleted!",
                                    text: res.message,
                                    icon: "success",
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            } else {
                                Swal.fire({
                                    title: "Error",
                                    text: res.message,
                                    icon: "error",
                                    timer: 2500,
                                    showConfirmButton: false
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                title: "Error",
                                text: "Something went wrong while deleting Row.",
                                icon: "error",
                                timer: 2500,
                                showConfirmButton: false
                            });
                        }
                    });
                }
            });
        });





    });
</script>













