<!DOCTYPE html>
<style>
    .modal-backdrop {
        display: none;
    }

    .modal-blur {
        filter: blur(5px);
        transition: filter 0.3s ease;
    }

    .toast-top-right .toast-warning {
        background-color: #ffc107 !important; /* yellow background */
        color: #ffffff !important; /* white text */
    }
</style>
<html lang="en">
<body>
    <div id="overlay" style="display:none; position:fixed; inset:0; background:rgba(0,0,0,0.5); z-index:1040;"></div>


    <div class="container">
        @*<button type="button" id="createitem" class="btn btn-primary"> Create New Item</button>*@
        <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index : 1100;"></div>


        <!-- Modal -->
        <div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="itemModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl modal-dialog-scrollable">
                <!-- XL size for full form -->
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title w-100 text-center fw-bolder bg-primary text-white" id="itemModalLabel">Create New Item</h5>

                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body container mt-5 px-8  ">

                        <!-- Your Existing Form -->
                        <form method="post" id="itemForm">
                            <div class="row g-3" id="itemaster">

                                <input type="hidden" id="itemId" name="ItemIdOJ" value="" />
                                <!-- Item Code -->
                                <div class="col-md-6">
                                    <label for="itemCode" class="form-label">Item Code</label>
                                    <input type="text" id="itemCode" name="ItemCode" class="form-control" readonly placeholder="Enter item code" />
                                </div>

                                <!-- Item Name -->
                                <div class="col-md-6">
                                    <label for="itemName" class="form-label">Item Name</label>
                                    <input type="text" id="itemName" name="ItemName" class="form-control" placeholder="Enter item name" required />
                                </div>

                                <!-- Cost Per Unit -->
                                <div class="col-md-6">
                                    <label for="costPerUnit" class="form-label">Cost Per Unit</label>
                                    <input type="number" step="0.01" id="costPerUnit" name="UnitRates" class="form-control" placeholder="Enter cost per unit" required />
                                </div>

                                <!-- Min Quantity -->
                                <div class="col-md-6">
                                    <label for="minQuantity" class="form-label">Min Quantity</label>
                                    <input type="number" id="minQuantity" name="MinQuantity" class="form-control" placeholder="Enter minimum quantity" required />
                                </div>

                                <!-- HSN Code -->
                                <div class="col-md-6">
                                    <label for="hsnCode" class="form-label">HSN Code</label>
                                    <input type="text" id="hsnCode" name="HSNCode" class="form-control" placeholder="Enter HSN code" readonly />
                                </div>

                                <!-- Reorder Quantity -->
                                <div class="col-md-6">
                                    <label for="reorderQuantity" class="form-label">Reorder Quantity</label>
                                    <input type="number" id="reorderQuantity" name="RecorderQuantity" class="form-control" placeholder="Enter reorder quantity" required />
                                </div>

                                <!-- Description -->
                                <div class="col-md-12">
                                    <label for="description" class="form-label">Description</label>
                                    <textarea id="description" name="Description" class="form-control" rows="3" placeholder="Enter item description" required></textarea>
                                </div>

                                <!-- Item Status -->
                                <div class="col-md-6">
                                    <label for="itemStatus" class="form-label">Item Status</label>
                                    <select id="itemStatus" name="ItemStatusId" class="form-select" required>
                                        <option value="">Select Status</option>
                                    </select>
                                </div>

                                <!-- Item Category -->
                                <div class="col-md-6">
                                    <label for="itemCategory" class="form-label">Item Category</label>
                                    <select id="itemCategory" name="ItemCategoryId" class="form-select" required>
                                        <option value="">Select Category</option>
                                    </select>
                                </div>

                                <!-- Item Make -->
                                <div class="col-md-6">
                                    <label for="itemMake" class="form-label">Item Make</label>
                                    <select id="itemMake" name="ItemMakeId" class="form-select" required>
                                        <option value="">Select Make</option>
                                    </select>
                                </div>

                                <!-- UOM -->
                                <div class="col-md-6">
                                    <label for="uom" class="form-label">UOM</label>
                                    <select id="uom" name="UOMId" class="form-select" required>
                                        <option value="">Select UOM</option>
                                    </select>
                                </div>

                                <!-- Expiry Days -->
                                <div class="col-md-6">
                                    <label for="EXD" class="form-label">ExpireDays</label>
                                    <input type="text" id="ExpiryDays" name="ExpiryDays" class="form-control" required />
                                </div>

                                <!-- Quality Check -->
                                <div class="col-md-6">
                                    <label for="qualityCheck" class="form-label">Quality Check</label>
                                    <select id="qualityCheck" name="ISQualityBit" class="form-select">
                                        <option value="">Select</option>
                                        <option value="1">Yes</option>
                                        <option value="0">No</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Inspection Form -->
                            <div class="container mt-5 " id="inspectionfrm" style="display:none;">
                                <h5 class="w-100 text-center fw-bolder bg-primary text-white" id="inspec">Inspection Plan</h5>
                                <div class="row g-3">
                                    <input type="hidden" id="itemqualityid" name="ItemQualityId" value="" />

                                    <div class="col-md-6">
                                        <label for="plantype" class="form-label">Plan Type</label>
                                        <select id="plantype" name="PlanId" class="form-select">
                                            <option value="">Select</option>
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label for="plancode" class="form-label">Plan Code</label>
                                        <input type="text" id="plancode" name="PlanCode" readonly class="form-control" />
                                    </div>

                                    <div class="col-md-12">
                                        <label for="pdescription" class="form-label">Description</label>
                                        <textarea id="pdescription" name="PlanDescription" class="form-control" rows="3" placeholder="Enter item description"></textarea>
                                    </div>

                                    <div class="col-md-6">
                                        <label for="inspetype" class="form-label">Inspection Type</label>
                                        <select id="inspetype" name="InspectionId" class="form-select">
                                            <option value="">Select</option>
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label for="quantiti" class="form-label">Quantitative Parameters</label>
                                        <select id="quantiti" name="QualityParametersId" class="form-select">
                                            <option value="">Select</option>
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label for="quality" class="form-label">Qualitative Parameters</label>
                                        <select id="quality" name="QuantityParametersId" class="form-select">
                                            <option value="">Select</option>
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label for="qua" class="form-label">Quantity</label>
                                        <input type="text" id="qua" name="PQuality" class="form-control" />
                                    </div>

                                    <div class="col-md-6">
                                        <label for="uompara" class="form-label">UOM</label>
                                        <select id="uompara" name="PUOMId" class="form-select">
                                            <option value="">Select UOM</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="mt-4">
                                    <button type="button" id="addpara" class="btn btn-success">Add Parameters</button>
                                </div>

                                <div class="mt-5" id="itemlist">
                                    <table class="table table-striped">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Sr.No</th>
                                                <th>Quality Parameters</th>
                                                <th>Quantity</th>
                                                <th>UOM</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody id="paralist"></tbody>
                                    </table>
                                </div>
                            </div>


                            <!-- Submit -->
                            <div class="mt-4 d-flex justify-content-end">
                                <button type="submit" id="subitem" class="btn btn-success">Save Item</button>
                            </div>
                        </form>
                    </div>

                </div>
            </div>
        </div>
    </div>



    <!-- table and button for item master-->
    <div class="container-fluid">

        <div class="card">
            <div class="card-body">
                <h3 class="w-100 text-center  text-primary fw-bolder ">Item Master List</h3>

                <!-- 🔹 Header Row inside Card -->
                <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">

                    <!-- Left: Create New Item button -->

                    <div class="input-group" style="height: 40px; max-width: 280px;">
                        <span class="input-group-text bg-primary text-white" style="height: 100%;">
                            <i class="bi bi-calendar-date"></i>
                        </span>
                        <input type="text" id="itemdatefilter" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
                    </div>
                    <!-- Right: Date Range Picker + Export -->
                    <div class="d-flex align-items-center gap-3 ms-auto">

                        <!-- Date Range Picker -->
                        <div>
                            <button type="button" class="btn btn-success btn-sm"
                                    data-bs-toggle="modal"
                                    id="createitem"
                                    data-bs-target="#itemModal">
                                <i class="bi bi-plus-circle"></i> Create New Item
                            </button>
                        </div>

                        <!-- Export Buttons -->
                        <div id="exportContainer" class="d-flex" style="height: 40px; align-items: center;">
                            <!-- DataTable export buttons will be injected here -->
                        </div>
                    </div>
                </div>

                <!-- 🔹 Table -->
                <div id="recordList">
                    <table id="table" class="display table table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th>Select Item</th>
                                <th>Sr.No</th>
                                <th>ItemCode</th>
                                <th>ItemName</th>
                                <th>UOM</th>
                                <th>Date</th>
                                <th>Cost per Unit</th>
                                <th>ItemCategory</th>
                                <th>Min Quantity</th>
                                <th>Item Status</th>
                                <th>Quality Check</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="table"></tbody>
                    </table>
                </div>

            </div>
        </div>


    </div>

</body>
</html>




<script>
    $(document).ready(function () {

        // get list of item
        $(document).ready(function () {
            let table = $('#table').DataTable({
                ajax: {
                    url: '/Inventory/GetItemsOJ',
                    type: 'GET',
                    dataSrc: ''
                },
                response: true,
                scrollX: true,

                columns: [
                    {
                        data: null,
                        orderable: false,
                        searchable: false,
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="row-checkbox tooltipss" value="${row.ItemIdOJ}">`;
                        }
                    },
                    {
                        data: null,
                        orderable: false,
                        searchable: false,
                        render: function (data, type, row, meta) {
                            // For display only
                            return meta.row + 1;
                        }
                    },
                    { data: 'ItemCode' },
                    { data: 'ItemName' },
                    { data: 'UOM' },
                    {
                        data: "Date",
                        render: function (data) {
                            if (!data) return "--";

                            let dateObj;
                            if (data.startsWith("/Date(")) {
                                let timestamp = parseInt(data.replace(/[^0-9]/g, ""));
                                dateObj = new Date(timestamp);
                            } else {
                                dateObj = new Date(data);
                            }

                            if (isNaN(dateObj.getTime())) {
                                return `<span data-bs-toggle="tooltip" title="Invalid Date">${data}</span>`;
                            }

                            let dd = String(dateObj.getDate()).padStart(2, "0");
                            let mm = String(dateObj.getMonth() + 1).padStart(2, "0");
                            let yyyy = dateObj.getFullYear();

                            let formatted = `${dd}-${mm}-${yyyy}`;
                            let tooltip = formatted;

                            return `<span data-bs-toggle="tooltip" data-bs-placement="top" title="${tooltip}">${formatted}</span>`;
                        }
                    },

                    { data: 'UnitRates' },
                    { data: 'ItemCategory' },
                    { data: 'MinQuantity' },
                    { data: 'Status' },
                    { data: 'ISQuality' },
                    {
                        data: null,
                        render: function (data, type, row) {
                            return `<button class="btn btn-secondary btnedit"
                        data-id="${row.ItemIdOJ}" data-code="${row.ItemCode}"
                        data-bs-toggle="tooltip" data-bs-placement="top"
                        title="View Item"><i class="bi bi-pencil-square"></i></button>`;
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: 0,
                        title: `<input type="checkbox" id="select-all">`,
                        orderable: false
                    }
                ],
                layout: {
                    topStart: {
                        buttons: [
                            {
                                extend: 'print',
                                text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                                title: "Inventory List",
                                action: function (e, dt, button, config) {
                                    if ($('.row-checkbox:checked').length === 0) {
                                        showExportToast(); // 🔔 will now work
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-checkbox').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)'
                                },
                                customize: function (win) {
                                    $(win.document.body).find('table tbody tr').each(function (i) {
                                        $(this).find('td:first').text(i + 1);
                                    });
                                }
                            },

                            {
                                extend: 'pdfHtml5',
                                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                title: "Inventory List",
                                action: function (e, dt, button, config) {
                                    if ($('.row-checkbox:checked').length === 0) {
                                        showExportToast(); // 🔔 will now work
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-checkbox').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)'
                                },
                                customize: function (doc) {
                                    // Reset serial no
                                    doc.content[1].table.body.forEach((row, i) => {
                                        if (i > 0) row[0].text = i;
                                    });

                                    // Apply background color to header
                                    var headerRow = doc.content[1].table.body[0];
                                    headerRow.forEach(function (cell) {
                                        cell.fillColor = '#000000';   // Black background
                                        cell.color = '#ffffff';       // White text
                                        cell.bold = true;
                                        cell.alignment = 'center';
                                    });
                                }
                            },
                            {
                                extend: 'excelHtml5',
                                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                title: "Inventory List",
                                action: function (e, dt, button, config) {
                                    if ($('row-checkbox:checked').length === 0) {
                                        showExportToast(); // 🔔 will now work
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-checkbox').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)'
                                },
                                customizeData: function (data) {
                                    data.body.forEach((row, i) => {
                                        row[0] = i + 1; // Reset serial numbers
                                    });
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: '<i class="bi bi-filetype-csv text-dark fs-5"></i>',
                                title: "Inventory List",
                                action: function (e, dt, button, config) {
                                    if ($('.row-checkbox:checked').length === 0) {
                                        showExportToast(); // 🔔 will now work
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-checkbox').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)'
                                },
                                customizeData: function (data) {
                                    data.body.forEach((row, i) => {
                                        row[0] = i + 1;
                                    });
                                }
                            },

                        ]
                    }
                }
            });

            $('#table').on('draw.dt', function () {
                $('[data-bs-toggle="tooltip"]').tooltip();
            });
        });

        //datepicker
        $('#itemdatefilter').daterangepicker({
            autoUpdateInput: false,
            opens: "center",
            drops: "down",
            locale: { cancelLabel: 'Clear' },
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, function (start, end) {
            $('#itemdatefilter').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));

            $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(f => f.name !== 'dateFilter');

            var dateFilter = function (settings, data, dataIndex) {
                var dateStr = data[5]; // Date column index in your table
                if (!dateStr || dateStr === "--") return false;

                // Extract actual text from span if you used tooltip
                var html = document.createElement('div');
                html.innerHTML = dateStr;
                var textDate = html.textContent || html.innerText;

                var rowDate = moment(textDate, "YY-MM-DD"); // same format used in render
                return rowDate.isBetween(start, end, 'day', '[]'); // inclusive
            };
            dateFilter.name = 'dateFilter';
            $.fn.dataTable.ext.search.push(dateFilter);

            $('#table').DataTable().draw();
        });

        // Clear filter
        $('#itemdatefilter').on('cancel.daterangepicker', function () {
            $(this).val('');
            // Remove date filter
            $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(f => f.name !== 'dateFilter');
            $('#table').DataTable().draw();
        });


        $('#clearFilter').on('click', function () {
            $('#Purchasedatepicker').val('');
            tblPOHistory.draw();
        });

        // When header checkbox is clicked
        $(document).on('click', '#select-all', function () {
            let checked = this.checked;
            $('.row-checkbox').prop('checked', checked);
        });


        //toaster for form
        function showToast(message, type = 'danger') {
            const toastHTML = `
         <div class="toast align-items-center text-white bg-${type} border-0 mb-2" role="alert">
         <div class="d-flex">
         <div class="toast-body">${message}</div>
         <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
         </div>
        </div>`;
            const $toast = $(toastHTML);
            $('#toastContainer').append($toast);
            new bootstrap.Toast($toast[0], { delay: 3000 }).show();
            $toast.on('hidden.bs.toast', function () { $(this).remove(); });
            $.fn.dataTable.ext.buttons[buttonType].action.call(this, e, dt, button, config);

        }

        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000" // 3 seconds
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }

        $('#table').on('change', '#select-all', function () {
            let checked = this.checked;
            $('.row-checkbox').prop('checked', checked);
        });


        // function for close button
        $('#itemModal').on('hidden.bs.modal', function () {
            $('#itemForm')[0].reset();

            $('#itemId').val('');
            $('#itemqualityid').val('');
            $('#itemStatus').val('');
            $('#itemCategory').val('');
            $('#itemMake').val('');
            $('#uom').val('');
            $('#qualityCheck').val('');
            $("#paralist").empty();

            $('#inspectionfrm').hide();
            $('#itemaster').show();
        });

        // getting status for item master form
        $.ajax({
            url: '/Inventory/GetStatusOJ',
            type: 'GET',

            success: function (status) {
                console.log(status);

                $(status).each(function (i, sta) {
                    $('#itemStatus').append(`<option value="${sta.StatusId}">${sta.StatusName}</option>`);

                })

            }
        })
        //fetching category for item master form
        $.ajax({
            url: '/Inventory/GetCatOJ',
            type: 'GET',

            success: function (cat) {
                console.log(cat);

                $(cat).each(function (i, cate) {
                    $('#itemCategory').append(`<option value="${cate.ItemCategoryId}">${cate.ItemCategoryName}</option>`)
                })
            }
        })
        // fetching hsncode for on bases of item category
        $('#itemCategory').on('change', function () {
            var cat = $(this).val();
            console.log(cat);

            $.ajax({

                url: '/Inventory/FetchHSNOJ',
                type: 'GET',
                data: { id: cat },

                success: function (hsn) {
                    console.log(hsn);

                    $(hsn).each(function (i, hs) {
                        $('#hsnCode').val(hs.HSNCode)
                    })
                }
            })
        })
        // getting item make for item form
        $.ajax({

            url: '/Inventory/GetMakeOJ',
            type: 'GET',
            success: function (make) {
                console.log(make);
                $(make).each(function (i, m) {
                    $('#itemMake').append(`<option value="${m.ItemMakeId}">${m.ItemMake}</option>`)
                })
            }
        })

        // getting item uom for item form

        $.ajax({
            url: '/Inventory/GetUOMOJ',
            type: 'GET',
            success: function (uom) {
                console.log(uom);
                $(uom).each(function (i, u) {
                    $('#uom').append(`<option value="${u.UOMId}">${u.UOMName}</option>`)
                    $('#uompara').append(`<option value="${u.UOMId}">${u.UOMName}</option>`)

                })
            }
        })
        // getting item plan for inspection form

        $.ajax({
            url: '/Inventory/GetPlanOJ',
            type: 'GET',
            success: function (plan) {
                console.log(plan);
                $(plan).each(function (i, p) {
                    $('#plantype').append(`<option value="${p.PlanTypeId}">${p.PlanType}</option>`)
                })
            }
        })
        // getting item inspection for inspection form

        $.ajax({
            url: '/Inventory/InsepctionOJ',
            type: 'GET',
            success: function (plan) {
                console.log(plan);
                $(plan).each(function (i, p) {
                    $('#inspetype').append(`<option value="${p.InseepctionId}">${p.InsepctionName}</option>`)
                })
            }
        })
        // getting quantity on bases of inspection
        $('#inspetype').on('change', function () {
            $('#quantiti').empty();
            $('#quality').empty()
            var insp = $(this).val();
            console.log(insp)
            //quantitive
            if (insp == 53) {
                $.ajax({
                    url: '/Inventory/GetQuanOJ',
                    type: 'GET',
                    success: function (plan) {
                        console.log(plan);
                        $('#quantiti').empty();
                        $('#quantiti').append('<option value="">Select</option>');
                        $(plan).each(function (i, p) {
                            $('#quantiti').append(`<option value="${p.QuantitativeId}">${p.QuantitativeName}</option>`)
                        })
                    }
                })

            }
            else if (insp == 54) {
                $.ajax({
                    url: '/Inventory/GetQualityOJ',
                    type: 'GET',
                    data: { id: insp },
                    success: function (qual) {
                        console.log(qual);
                        $('#quality').empty();
                        $('#quality').append('<option value="">Select</option>');
                        $(qual).each(function (i, q) {
                            $('#quality').append(`<option value="${q.Qualitative}">${q.QualitativeName}</option>`)
                        })
                    }
                })
            }
        })

        $("#itemForm").on("submit", function (e) {
            let quantiti = $("#quantiti").val();
            let quality = $("#quality").val();
            let finalValue = quantiti || quality;

            $("#QP").val(finalValue);
        });


        $("#createitem").on("click", function () {

            $("#itemForm input, #itemForm textarea").prop("readonly", false);
            $("#itemForm select, #itemForm input[type='checkbox'], #itemForm input[type='radio']")
                .prop("disabled", false);

            $("#inspectionfrm label, #inspectionfrm input, #inspectionfrm select, #inspectionfrm button").show();
            $("#pdescription").show();

            $("#subitem").show();

            // 👉 Hide delete buttons inside paralist
            $("#paralist .btndelete").show();



            $('#itemModal').on('show.bs.modal', function () {
                $("#overlay").fadeIn(200);
            });

            $('#itemModal').on('hide.bs.modal', function () {
                $("#overlay").fadeOut(200);


            });
            $.ajax({
                url: '/Inventory/GetNextItemCodeOJ',
                type: 'GET',
                success: function (data) {
                    console.log(data);
                    $("#inspectionfrm").hide();
                    $('#itemaster').show();
                    $("#itemCode").val(data.itemCode);
                    $("#itemModalLabel").text("Create Item");   // header title
                    $("#subitem").text("Save Item");

                },
                error: function (err) {
                    console.log("Error:", err.responseText);
                }
            });

        });
        // saving item form
        $('#itemForm').on('submit', function (e) {
            e.preventDefault();

            var item = $(this).serialize();
            console.log(item);

            $.ajax({
                url: '/Inventory/AddItemOJ',
                type: 'POST',
                data: item,
                success: function (data) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Inserted ✅',
                        text: 'Item has been saved successfully!',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    $('#itemForm')[0].reset();

                    $('#itemModal').modal('hide');

                    $('#table').DataTable().ajax.reload();
                },
                error: function (err) {
                    console.log(err);

                    Swal.fire({
                        icon: 'error',
                        title: 'Error ❌',
                        text: 'Error while saving item!',
                        showConfirmButton: true
                    });
                }
            });
        });
        // checking quality of item form
        $("#qualityCheck").on("change", function () {
            if ($(this).val() === "1") {  // Yes selected
                $.ajax({
                    url: '/Inventory/GenerateNextPlanCodeOJ',
                    type: 'GET',
                    success: function (data) {
                        console.log(data);
                        $("#inspectionfrm").show();
                        $("#plancode").val(data.plancode);
                    },
                    error: function (err) {
                        console.log("Error:", err.responseText);
                    }
                });
            } else {
                $("#plancode").val("");
            }
        });

        document.getElementById("createitem").addEventListener("click", function () {
            document.getElementById("itemForm").style.display = "block";
            $('#inspectionfrm').hide();


        })

        document.getElementById("qualityCheck").addEventListener("change", function () {
            if (this.value === "1") {
                document.getElementById("inspectionfrm").style.display = "block";
            } else {
                document.getElementById("inspectionfrm").style.display = "none";
            }



        });
        // button for updating item form
        $(document).on("click", ".btnedit", function () {
            $("#itemModal").modal("show");

            $("#itemForm").show();

            $("#itemModalLabel").text("View Item Plan");
            $("#inspec").hide();

            var id = $(this).data("id");
            var itemCode = $(this).data("code");
            console.log("Item ID being updated:", id);
            ;
            $("#itemId").val(id);

            $.ajax({
                url: '/Inventory/GetitemsidOJ',
                type: 'GET',
                data: { id: id },
                success: function (data) {
                    console.log("Item details:", data);
                    if (data.success) {



                        // Fill input boxes
                        $("#itemId").val(data.id);
                        $("#itemCode").val(data.itemcode);
                        $("#itemName").val(data.name);
                        $("#description").val(data.descri);
                        $("#costPerUnit").val(data.unitR);
                        $("#reorderQuantity").val(data.recQ);
                        $("#minQuantity").val(data.minQ);
                        $("#itemMake").val(data.itemby);
                        $("#ExpiryDays").val(data.exp);
                        $("#qualityCheck").val(data.isqua.toString());
                        $("#hsnCode").val(data.hsn);
                        $("#itemCategory").val(data.category);
                        $("#uom").val(data.uom.toString());
                        $("#itemStatus").val(data.status.toString());






                        if (data.isqua == 1) {
                            $("#inspectionfrm").show();
                        } else {
                            $("#inspectionfrm").hide();
                        }

                        $("#itemForm input, #itemForm textarea").prop("readonly", true);
                        $("#itemForm select, #itemForm input[type='checkbox'], #itemForm input[type='radio']")
                            .prop("disabled", true);

                        $("#inspectionfrm label, #inspectionfrm input, #inspectionfrm select, #inspectionfrm button")
                            .not("#paralist, #paralist *")  // keep paralist table intact
                            .hide();
                        $("#pdescription").hide();




                        // 👉 Hide delete buttons inside paralist
                        $("#paralist .btndelete").hide();
                        $("#subitem").hide();


                    } else {
                        alert(data.message);
                    }
                }
            });
            // getting inspection details for updating
            $.ajax({
                url: '/Inventory/GetInspeplanOJ',
                type: 'GET',
                data: { itemCode: itemCode },
                success: function (plan) {
                    console.log("Inspection Plan:", plan);

                    if (plan.success && plan.data.length > 0) {
                        $(plan.data).each(function (i, inspe) {

                            $('#plancode').val(inspe.plancode);
                            $('#plantype').val(inspe.planid);
                            $('#paralist').append(
                                `<tr>
                                 <td class="srno">${i + 1}</td>
                                 <td>${inspe.parametersname}</td>
                                 <td>${inspe.pquality}</td>
                                 <td>${inspe.puomname}</td>
                                 <td>
                                <button type="button" class="btn btn-danger btndelete"  data-id="${inspe.itemquality}"><i class="bi bi-trash3"></i></button>
                                </td>
                                </tr>`

                            );

                        });
                        $("#paralist .btndelete").hide();

                    } else {
                        //    $('#paralist').append("<tr><td colspan='4'>No parameters added yet</td></tr>");
                    }
                }
            });

        });
        // button for delteting parameters
        $(document).on("click", ".btndelete", function () {
            const id = $(this).data("id");  // ItemQualityId
            const row = $(this).closest("tr");
            const planCode = $("#plancode").val();

            Swal.fire({
                title: "Are you sure?",
                text: "This will delete the inspection plan!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!",
                cancelButtonText: "No, cancel"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Inventory/DelParaOJ',
                        type: 'POST',
                        data: { id: id },
                        success: function (res) {
                            console.log("Delete response:", res);

                            if (res && res.success) {
                                // ✅ remove row from table
                                row.remove();
                                reindexRows();

                                // ✅ refresh parameter list
                                loadParameterList(planCode);

                                Swal.fire({
                                    icon: "success",
                                    title: "Deleted!",
                                    text: "The inspection plan has been deleted.",
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            } else {
                                Swal.fire({
                                    icon: "error",
                                    title: "Error!",
                                    text: res.message || "Could not delete the plan."
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Delete error:", error);
                            Swal.fire({
                                icon: "error",
                                title: "Oops...",
                                text: "Something went wrong while deleting!"
                            });
                        }
                    });
                }
            });
        });



        function reindexRows() {
            $("#paralist tr").each(function (i) {
                $(this).find("td.srno").text(i + 1);
            });
        }

    })
    //adding parameters to the list
    $("#addpara").on("click", function (e) {
        e.preventDefault();

        var paramData = {
            PlanCode: $("#plancode").val(),
            ItemCode: $("#itemCode").val(),
            InspectionId: $("#inspetype").val(),
            QuantityParametersId: $("#quantiti").val(),
            QualityParametersId: $("#quality").val(),
            PQuality: $("#qua").val(),
            PlanId: $("#plantype").val(),
            PlanDescription: $("#pdescription").val(),
            PUOMId: $("#uompara").val()
        };

        console.log("Adding parameter:", paramData);

        $.ajax({
            url: "/Inventory/AddPlanOJ",
            type: "POST",
            data: paramData,
            success: function (response) {
                console.log("Insert response:", response);

                if (response.success) {
                    // update hidden fields
                    $("#plancode").val(response.planCode);
                    $("#itemCode").val(response.itemCode);
                    $("#pdescription").val("");

                    // reload parameter list **once**
                    loadParameterList(response.planCode);

                    // clear form fields
                    $("#inspetype").val("");
                    $("#quantiti").val("");
                    $("#quality").val("");
                    $("#qua").val("");
                    $("#uompara").val("");
                } else {
                    alert("Error: " + response.message);
                }
            },
            error: function (xhr) {
                console.error("Insert failed:", xhr.responseText);
                alert("Failed to insert parameter.");
            }
        });
    });

    // loading parameters from the in parameters list




    function loadParameterList(planCode) {
        $('#paralist').empty();
        debugger
        $.ajax({
            url: '/Inventory/ShowPlanOJ',
            type: 'GET',
            data: { planCode: planCode },
            success: function (res) {
                if (res.success && res.data.length > 0) {
                    $(res.data).each(function (i, inspe) {
                        $('#paralist').append(
                            `<tr>
                        <td class="srno">${i + 1}</td>
                        <td>${inspe.QualityParametersName}</td>
                        <td>${inspe.PQuality}</td>
                        <td>${inspe.PUOMName}</td>
                        <td>
                            <button type="button" class="btn btn-danger btndelete"  data-id="${inspe.ItemQualityId}"><i class="bi bi-trash3"></i></button>
                        </td>
                    </tr>`
                        );
                    });
                } else {
                    $('#paralist').append("<tr><td colspan='4'>No parameters added yet</td></tr>");
                }
            },
            error: function (err) {
                console.log("Error fetching list:", err);
            }
        });
    }


</script>


