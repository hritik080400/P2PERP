<style>
    #currentStockTable thead th {
        text-align: center;
        vertical-align: middle;
    }

    #currentStockTable td {
        text-align: center;
        vertical-align: middle;
    }

    div.dt-buttons {
        margin-top: 10px;
        margin-bottom: 10px;
    }
</style>
<div class="container mt-4 card shadow-sm">
    <h3 class="text-primary text-center fw-bolder">Current Stock</h3>
    <table id="currentStockTable" class="table table-bordered table-striped wrap">
        <thead class="table-dark text-center">
            <tr>
                <th>
                    <input type="checkbox" id="selectAllCurrent">
                </th>
                <th>Sr.No</th>
                <th>Item Code</th>
                <th>Item Name</th>
                <th>Current Qty</th>
                <th>Reorder Qty</th>
                <th>BinName</th>
            </tr>
        </thead>
    </table>
</div>



<script>
$(document).ready(function () {
    // --- Global toastr options ---
    toastr.options = {
        closeButton: true,
        progressBar: true,
        preventDuplicates: true,
        newestOnTop: true,
        positionClass: "toast-top-right",
        timeOut: "3000" // 3 seconds
    };

    // --- Global set to store selected rows ---
    var selectedIds = new Set();

    // --- Helper for serial number reset in export ---
    function serialFormatter() {
        let counter = 1;
        return function (data, row, column, node) {
            // column === 1 => serial number wali column
            if (column === 1) {
                return counter++;
            }
            return data;
        };
    }

    // --- Initialize DataTable ---
    var currentStockTable = $('#currentStockTable').DataTable({
        "ajax": {
            "url": "@Url.Action("CurrentStockJsonLM", "Inventory")",
            "type": "GET",
            "datatype": "json"
        },
        "columns": [
            {
                "data": null,
                "orderable": false,
                "searchable": false,
                "className": "text-center",
                "render": function (data, type, row, meta) {
                    let uniqueId = row.ItemCode + "_" + meta.row;
                    return `<input type="checkbox" class="row-checkbox-current" data-id="${uniqueId}" data-code="${row.ItemCode}">`;
                }
            },
            {
                "data": null,
                "orderable": false,
                "searchable": false,
                "className": "text-center",
                "render": function (data, type, row, meta) {
                    return meta.row + 1;
                }
            },
            { "data": "ItemCode", "className": "text-center" },
            { "data": "ItemName", "className": "text-center" },
            { "data": "CurrentQty", "className": "text-center" },
            { "data": "ReorderQuantity", "className": "text-center" },
            { "data": "BinName", "className": "text-center" }
        ],

        dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',

        buttons: [
            // --- PRINT ---
            {
                extend: 'print',
                text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                title: `Current Stock - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: ':visible:not(:first-child)',
                    rows: function (idx, data, node) {
                        return selectedIds.has(data.ItemCode + "_" + idx);
                    },
                    format: { body: serialFormatter() } //  serial reset
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning("Please select at least one item before printing.");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                },
                  customize: function (win) {
                    $(win.document.body).find('table')
                        .css('border', '1px solid black')
                        .css('border-collapse', 'collapse')
                        .find('th, td')
                        .css('border', '1px solid black')
                        .css('padding', '5px');

                    $(win.document.body).find('th')
                        .css('background-color', 'black')
                        .css('color', 'white');
                }
            },
            // --- PDF ---
            {
                extend: 'pdfHtml5',
                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                title: `Current Stock - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: ':visible:not(:first-child)',
                    rows: function (idx, data, node) {
                        return selectedIds.has(data.ItemCode + "_" + idx);
                    },
                    format: { body: serialFormatter() }
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning("Please select at least one item before exporting.");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                },
                customize: function (doc) {
                    //  Table border line
                    var objLayout = {};
                    objLayout['hLineWidth'] = function (i) { return 0.8; };
                    objLayout['vLineWidth'] = function (i) { return 0.8; };
                    objLayout['hLineColor'] = function (i) { return '#000'; };
                    objLayout['vLineColor'] = function (i) { return '#000'; };
                    objLayout['paddingLeft'] = function (i) { return 5; };
                    objLayout['paddingRight'] = function (i) { return 5; };
                    doc.content[1].layout = objLayout;

                    //  Header background black + white text
                    var headerCells = doc.content[1].table.body[0];
                    headerCells.forEach(function (cell) {
                        cell.fillColor = '#000000';
                        cell.color = '#ffffff';
                        cell.bold = true;
                        cell.alignment = 'center';
                    });
                }
            },
            // --- EXCEL ---
            {
                extend: 'excelHtml5',
                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                title: `Current Stock - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: ':visible:not(:first-child)',
                    rows: function (idx, data, node) {
                        return selectedIds.has(data.ItemCode + "_" + idx);
                    },
                    format: { body: serialFormatter() }
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning("Please select at least one item before exporting.");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                }
            },
            // --- CSV ---
            {
                extend: 'csvHtml5',
                text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                title: `Current Stock - ${moment().format("YYYY-MM-DD")}`,
                exportOptions: {
                    columns: ':visible:not(:first-child)',
                    rows: function (idx, data, node) {
                        return selectedIds.has(data.ItemCode + "_" + idx);
                    },
                    format: { body: serialFormatter() }
                },
                action: function (e, dt, button, config) {
                    if (selectedIds.size === 0) {
                        toastr.warning("Please select at least one item before exporting.");
                        return;
                    }
                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                }
            }
        ]
    });

    // --- Row checkbox logic ---
    $('#currentStockTable tbody').on('change', '.row-checkbox-current', function () {
        const id = $(this).data('id');
        if ($(this).is(':checked')) selectedIds.add(id);
        else selectedIds.delete(id);

        //  Only update "Select All" checked state, remove indeterminate
        const allChecked = $('.row-checkbox-current').length === $('.row-checkbox-current:checked').length;
        $('#selectAllCurrent').prop('checked', allChecked);
    });

    // --- Select All checkbox logic ---
    $('#selectAllCurrent').on('change', function () {
        const isChecked = $(this).is(':checked');
        $('.row-checkbox-current').prop('checked', isChecked).trigger('change');
    });
});
</script>

