@{
    ViewBag.Title = "StockMaster";
    Layout = "~/Views/Shared/_InventoryLayout.cshtml";
}

<div class="container-fluid py-4">

    <h2>Stock Master</h2>

    <div class="card mt-3">
        <div class="card-body">
            <!-- 🔹 Header Row inside Card -->
            <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">

                <!-- Left: Create New Item button -->

                <div class="input-group" style="height: 40px; max-width: 280px;">
                    <span class="input-group-text bg-primary text-white" style="height: 100%;">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="reportrange" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
                </div>
                <!-- Right: Date Range Picker + Export -->
                <div class="d-flex align-items-center gap-3 ms-auto">
                    <!-- Export Buttons -->
                    <div id="exportContainer" class="d-flex" style="height: 40px; align-items: center;">
                        <!-- DataTable export buttons will be injected here -->
                    </div>
                </div>
            </div>

            <table id="reqTable" class="table table-striped w-100">
                <thead class="table-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAll"></th>
                        <th>#</th>
                        <th>Plan Name</th>
                        <th>Created Date</th>
                        <th>Plan Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tblRecent">
                    <tr><td colspan="6" class="text-center">Loading...</td></tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- 🔹 Modal for Viewing Plan -->
    <div class="modal fade" id="viewPlanModal" data-bs-backdrop="false" tabindex="-1" aria-labelledby="viewPlanModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white position-relative">
                    <div class="w-100 text-center">

                        <h5 class="modal-title text-white fw-bold mb-0 " id="viewPlanModalLabel">Plan Details</h5>


                    </div>
                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="viewPlanContent">

                    <!--
          Modal content area - dynamically loaded with partial views
          Shows detailed information when KPI cards or chart segments are clicked
        -->
                </div>
            </div>
        </div>
    </div>


</div>




    <script>
        let tableStartDate = null; // Start date for table filtering
        let tableEndDate = null;   // End date for table filtering
        let dataTable; // Declare dataTable variable globally

        $(document).ready(function () {
            loadStockPlans();

            // Handle View button click → load modal partial (using event delegation)
            $(document).on('click', '.btn-view-plan', function () {
                let id = $(this).data("id");

                $("#viewPlanContent").html(`
                    <div class="text-center my-5">
                        <div class="spinner-border text-primary" role="status"></div>
                        <p class="mt-2">Loading...</p>
                    </div>`);

                $.get("/Inventory/ViewPlanPartial", { id: id }, function (html) {
                    $("#viewPlanContent").html(html);
                    $("#viewPlanModal").modal("show");
                }).fail(function () {
                    $("#viewPlanContent").html(`<div class="text-danger">❌ Failed to load plan details.</div>`);
                });
            });
        });

        // Load stock plans via AJAX and initialize DataTable
        function loadStockPlans() {
            $.ajax({
                url: "/Inventory/StockMasterListRHK",
                type: "GET",
                success: function (response) {
                    // Destroy old DataTable if exists
                    if ($.fn.DataTable.isDataTable("#reqTable")) {
                        $('#reqTable').DataTable().clear().destroy();
                    }

                    // Populate table
                    $('#tblRecent').empty();
                    if (response?.data?.length > 0) {
                        let i = 1;
                        response.data.forEach(item => {

                            // Fix: Determine status class based on d.Status
                            let statusClass = item.Status == "Approved" ? "badge bg-success" : "badge bg-danger";

                            $('#tblRecent').append(`
                                <tr>
                                    <td><input type="checkbox" class="row-select" value="${item.MRPCode}"></td>
                                    <td>${i++}</td>
                                    <td>${item.PlanName || 'N/A'}</td>
                                    <td>${item.AddedDate ? formatDisplayDate(item.AddedDate) : 'N/A'}</td>
                                    <td><span class="${statusClass}">${item.Status || 'N/A'}</span></td>
                                    <td>
                                        <button class="btn btn-sm btn-primary btn-view-plan"
                                            data-id="${item.MRPCode}" title="View">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </td>
                                </tr>
                            `);
                        });

                        initDataTable();
                        initDateRangePicker();

                    } else {
                        $('#tblRecent').html(`<tr><td colspan="6" class="text-center text-muted">No stock plans found</td></tr>`);
                    }
                },
                error: function () {
                    $('#tblRecent').html(`<tr><td colspan="6" class="text-center text-danger">❌ Error loading stock plans</td></tr>`);
                }
            });
        }

        // Format date to dd/MM/yyyy
        function formatDisplayDate(dateValue) {
            const d = new Date(dateValue);
            return isNaN(d) ? dateValue : d.toLocaleDateString('en-GB');
        }

        // Initialize DataTable with export and row selection
        function initDataTable() {
            dataTable = $('#reqTable').DataTable({
                pageLength: 10,
                lengthMenu: [5, 10, 20, 50],
                ordering: true,
                responsive: true,
                columnDefs: [{ orderable: false, targets: [0, 5] }], // Make checkbox and action columns not sortable
                dom: '<"d-flex justify-content-between mb-2"Bf>rtip',
                buttons: [
                    {
                        extend: 'print',
                        text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                        className: 'btn btn-sm btn-outline-dark',
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return exportSelectedRows(idx, data, node);
                            }
                        },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        }
                    },
                    {
                        extend: 'pdf',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                        className: 'btn btn-sm btn-outline-danger',
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return exportSelectedRows(idx, data, node);
                            }
                        },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        }
                    },
                    {
                        extend: 'excel',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                        className: 'btn btn-sm btn-outline-success',
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return exportSelectedRows(idx, data, node);
                            }
                        },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        }
                    },
                    {
                        extend: 'csv',
                        text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                        className: 'btn btn-sm btn-outline-success',
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return exportSelectedRows(idx, data, node);
                            }
                        },
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        }
                    }
                ]
            });



            // Select All toggle
            $('#selectAll').off('change').on('change', function () {
                $('.row-select').prop('checked', this.checked);
            });

            // Update SelectAll checkbox when individual row changes
            $('#reqTable').off('change', '.row-select').on('change', '.row-select', function () {
                const total = $('.row-select').length;
                const checked = $('.row-select:checked').length;
                $('#selectAll').prop('checked', total === checked);
            });
        }



        // Export selected rows only
        function exportSelectedRows(idx, data, node) {
            let selected = $('.row-select:checked').map(function () {
                return this.value;
            }).get();

            if (selected.length === 0) {
                return false; // ❌ nothing exported
            }

            // MRPCode is in column index 0 (checkbox column value)
            return selected.includes(data[0]);
        }



        function initDateRangePicker() {
            $('#reportrange').daterangepicker({
                autoUpdateInput: false,
                locale: {
                    cancelLabel: 'Clear',
                    format: 'YYYY-MM-DD'
                },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            });

            // Apply date range when user selects
            $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
                tableStartDate = picker.startDate;
                tableEndDate = picker.endDate;
                $(this).val(tableStartDate.format('YYYY-MM-DD') + ' - ' + tableEndDate.format('YYYY-MM-DD'));

                // Filter the table based on date range
                filterTableByDate();
            });

            // Clear date range on cancel
            $('#reportrange').on('cancel.daterangepicker', function (ev, picker) {
                tableStartDate = null;
                tableEndDate = null;
                $(this).val('');
                dataTable.draw(); // Reset filtering
            });
        }


        function filterTableByDate() {
            if (tableStartDate && tableEndDate) {
                // Custom filtering function for date range
                $.fn.dataTable.ext.search.push(
                    function (settings, data, dataIndex) {
                        var date = moment(data[3], 'YYYY-MM-DD'); // Assuming date is in 4th column (index 3)

                        if ((tableStartDate === null && tableEndDate === null) ||
                            (tableStartDate === null && date <= tableEndDate) ||
                            (tableStartDate <= date && tableEndDate === null) ||
                            (tableStartDate <= date && date <= tableEndDate)) {
                            return true;
                        }
                        return false;
                    }
                );
            }

            dataTable.draw();

            // Remove the custom filter function after drawing
            $.fn.dataTable.ext.search.pop();
        }

        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }
    </script>
